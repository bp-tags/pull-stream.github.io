(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function find(n,t,r){if("function"==typeof Array.prototype.find)return n.find(t,r);r=r||this;var f,i=n.length;if("function"!=typeof t)throw new TypeError(t+" is not a function");for(f=0;f<i;f++)if(t.call(r,n[f],f,n))return n[f]}module.exports=find;

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(r){try{return cachedSetTimeout.call(null,e,0)}catch(r){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);try{return cachedClearTimeout(e)}catch(r){try{return cachedClearTimeout.call(null,e)}catch(r){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var r=queue.length;r;){for(currentQueue=queue,queue=[];++queueIndex<r;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,r=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,r){this.fun=e,this.array=r}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout=setTimeout}catch(e){cachedSetTimeout=function(){throw new Error("setTimeout is not defined")}}try{cachedClearTimeout=clearTimeout}catch(e){cachedClearTimeout=function(){throw new Error("clearTimeout is not defined")}}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var r=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)r[u-1]=arguments[u];queue.push(new Item(e,r)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};
},{}],4:[function(require,module,exports){
module.exports=function(e,r){var l=r||"/";return 0===e.length?l:(e=e.replace("#",""),e=e.replace(/\/$/,""),0!=e.indexOf("/")&&(e="/"+e),"/"==l?e:e.replace(l,""))};
},{}],5:[function(require,module,exports){
var inserted={};module.exports=function(e,t){if(!inserted[e]){inserted[e]=!0;var n=document.createElement("style");n.setAttribute("type","text/css"),"textContent"in n?n.textContent=e:n.styleSheet.cssText=e;var s=document.getElementsByTagName("head")[0];t&&t.prepend?s.insertBefore(n,s.childNodes[0]):s.appendChild(n)}};

},{}],6:[function(require,module,exports){
module.exports=require("yo-yo");

},{"yo-yo":10}],7:[function(require,module,exports){
module.exports={start:require("./start"),pull:require("./pull"),html:require("./html")};
},{"./html":6,"./pull":19,"./start":20}],8:[function(require,module,exports){
module.exports=function(){for(var o=0;o<arguments.length;o++)if(void 0!==arguments[o])return arguments[o]};

},{}],9:[function(require,module,exports){
var pushable=require("pull-pushable");module.exports=function(){function n(n){for(var e=0;e<r.length;e++)r[e].push(n);return n}var r=[];return n.listen=function(){var n=pushable(function(){var e=r.indexOf(n);e!==-1&&r.splice(e,1)});return r.push(n),n},n.abort=function(n){for(;r.length;)r[0].end(n)},n.end=function(){return n.abort(!0)},n};

},{"pull-pushable":21}],10:[function(require,module,exports){
var bel=require("bel"),morphdom=require("morphdom"),defaultEvents=require("./update-events.js");module.exports=bel,module.exports.update=function(e,o,r){function t(e,o){for(var t=r.events||defaultEvents,n=0;n<t.length;n++){var u=t[n];o[u]?e[u]=o[u]:e[u]&&(e[u]=void 0)}("INPUT"===e.nodeName&&"file"!==e.type||"TEXTAREA"===e.nodeName||"SELECT"===e.nodeName)&&null===o.getAttribute("value")&&(o.value=e.value)}return r||(r={}),r.events!==!1&&(r.onBeforeMorphEl||(r.onBeforeMorphEl=t)),morphdom(e,o,r)};

},{"./update-events.js":18,"bel":11,"morphdom":17}],11:[function(require,module,exports){
function belCreateElement(e,t,a){function n(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var a=e[t];if(Array.isArray(a))n(a);else{if(("number"==typeof a||"boolean"==typeof a||a instanceof Date||a instanceof RegExp)&&(a=a.toString()),"string"==typeof a){if(o.lastChild&&"#text"===o.lastChild.nodeName){o.lastChild.nodeValue+=a;continue}a=document.createTextNode(a)}a&&a.nodeType&&o.appendChild(a)}}}var o;SVG_TAGS.indexOf(e)!==-1&&(t.namespace=SVGNS);var l=!1;if(t.namespace&&(l=t.namespace,delete t.namespace),o=l?document.createElementNS(l,e):document.createElement(e),t.onload||t.onunload){var r=t.onload||function(){},i=t.onunload||function(){};onload(o,function(){r(o)},function(){i(o)},belCreateElement.caller.caller.caller),delete t.onload,delete t.onunload}for(var f in t)if(t.hasOwnProperty(f)){var c=f.toLowerCase(),s=t[f];if("classname"===c&&(c="class",f="class"),"htmlFor"===f&&(f="for"),BOOL_PROPS[c])if("true"===s)s=c;else if("false"===s)continue;"on"===c.slice(0,2)?o[f]=s:l?o.setAttributeNS(null,f,s):o.setAttribute(f,s)}return n(a),o}var document=require("global/document"),hyperx=require("hyperx"),onload=require("on-load"),SVGNS="http://www.w3.org/2000/svg",BOOL_PROPS={autofocus:1,checked:1,defaultchecked:1,disabled:1,formnovalidate:1,indeterminate:1,readonly:1,required:1,selected:1,willvalidate:1},SVG_TAGS=["svg","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","stop","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"];module.exports=hyperx(belCreateElement),module.exports.createElement=belCreateElement;

},{"global/document":12,"hyperx":14,"on-load":16}],12:[function(require,module,exports){
(function (global){
var topLevel="undefined"!=typeof global?global:"undefined"!=typeof window?window:{},minDoc=require("min-document");if("undefined"!=typeof document)module.exports=document;else{var doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"];doccy||(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"]=minDoc),module.exports=doccy}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":2}],13:[function(require,module,exports){
(function (global){
"undefined"!=typeof window?module.exports=window:"undefined"!=typeof global?module.exports=global:"undefined"!=typeof self?module.exports=self:module.exports={};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],14:[function(require,module,exports){
function quot(T){return T===ATTR_VALUE_SQ||T===ATTR_VALUE_DQ}function has(T,e){return hasOwn.call(T,e)}function selfClosing(T){return closeRE.test(T)}var attrToProp=require("hyperscript-attribute-to-property"),VAR=0,TEXT=1,OPEN=2,CLOSE=3,ATTR=4,ATTR_KEY=5,ATTR_KEY_W=6,ATTR_VALUE_W=7,ATTR_VALUE=8,ATTR_VALUE_SQ=9,ATTR_VALUE_DQ=10,ATTR_EQ=11,ATTR_BREAK=12;module.exports=function(T,e){function A(T){return"function"==typeof T?T:"string"==typeof T?T:T&&"object"==typeof T?T:t("",T)}T=attrToProp(T),e||(e={});var t=e.concat||function(T,e){return String(T)+String(e)};return function(e){function n(T){var e=[];r===ATTR_VALUE_W&&(r=ATTR);for(var A=0;A<T.length;A++){var t=T.charAt(A);r===TEXT&&"<"===t?(R.length&&e.push([TEXT,R]),R="",r=OPEN):">"!==t||quot(r)?r===TEXT?R+=t:r===OPEN&&/\s/.test(t)?(e.push([OPEN,R]),R="",r=ATTR):r===OPEN?R+=t:r===ATTR&&/[\w-]/.test(t)?(r=ATTR_KEY,R=t):r===ATTR&&/\s/.test(t)?(R.length&&e.push([ATTR_KEY,R]),e.push([ATTR_BREAK])):r===ATTR_KEY&&/\s/.test(t)?(e.push([ATTR_KEY,R]),R="",r=ATTR_KEY_W):r===ATTR_KEY&&"="===t?(e.push([ATTR_KEY,R],[ATTR_EQ]),R="",r=ATTR_VALUE_W):r===ATTR_KEY?R+=t:r!==ATTR_KEY_W&&r!==ATTR||"="!==t?r!==ATTR_KEY_W&&r!==ATTR||/\s/.test(t)?r===ATTR_VALUE_W&&'"'===t?r=ATTR_VALUE_DQ:r===ATTR_VALUE_W&&"'"===t?r=ATTR_VALUE_SQ:r===ATTR_VALUE_DQ&&'"'===t?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r===ATTR_VALUE_SQ&&"'"===t?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r!==ATTR_VALUE_W||/\s/.test(t)?r===ATTR_VALUE&&/\s/.test(t)?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r!==ATTR_VALUE&&r!==ATTR_VALUE_SQ&&r!==ATTR_VALUE_DQ||(R+=t):(r=ATTR_VALUE,A--):(e.push([ATTR_BREAK]),/[\w-]/.test(t)?(R+=t,r=ATTR_KEY):r=ATTR):(e.push([ATTR_EQ]),r=ATTR_VALUE_W):(r===OPEN?e.push([OPEN,R]):r===ATTR_KEY?e.push([ATTR_KEY,R]):r===ATTR_VALUE&&R.length&&e.push([ATTR_VALUE,R]),e.push([CLOSE]),R="",r=TEXT)}return r===TEXT&&R.length?(e.push([TEXT,R]),R=""):r===ATTR_VALUE&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_VALUE_DQ&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_VALUE_SQ&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_KEY&&(e.push([ATTR_KEY,R]),R=""),e}for(var r=TEXT,R="",E=arguments.length,_=[],s=0;s<e.length;s++)if(s<E-1){var o=arguments[s+1],l=n(e[s]),f=r;f===ATTR_VALUE_DQ&&(f=ATTR_VALUE),f===ATTR_VALUE_SQ&&(f=ATTR_VALUE),f===ATTR_VALUE_W&&(f=ATTR_VALUE),f===ATTR&&(f=ATTR_KEY),l.push([VAR,f,o]),_.push.apply(_,l)}else _.push.apply(_,n(e[s]));for(var h=[null,{},[]],i=[[h,-1]],s=0;s<_.length;s++){var a=i[i.length-1][0],l=_[s],p=l[0];if(p===OPEN&&/^\//.test(l[1])){var u=i[i.length-1][1];i.length>1&&(i.pop(),i[i.length-1][0][2][u]=T(a[0],a[1],a[2].length?a[2]:void 0))}else if(p===OPEN){var g=[l[1],{},[]];a[2].push(g),i.push([g,a[2].length-1])}else if(p===ATTR_KEY||p===VAR&&l[1]===ATTR_KEY){for(var L,V="";s<_.length;s++)if(_[s][0]===ATTR_KEY)V=t(V,_[s][1]);else{if(_[s][0]!==VAR||_[s][1]!==ATTR_KEY)break;if("object"!=typeof _[s][2]||V)V=t(V,_[s][2]);else for(L in _[s][2])_[s][2].hasOwnProperty(L)&&!a[1][L]&&(a[1][L]=_[s][2][L])}_[s][0]===ATTR_EQ&&s++;for(var U=s;s<_.length;s++)if(_[s][0]===ATTR_VALUE||_[s][0]===ATTR_KEY)a[1][V]?a[1][V]=t(a[1][V],_[s][1]):a[1][V]=A(_[s][1]);else{if(_[s][0]!==VAR||_[s][1]!==ATTR_VALUE&&_[s][1]!==ATTR_KEY){!V.length||a[1][V]||s!==U||_[s][0]!==CLOSE&&_[s][0]!==ATTR_BREAK||(a[1][V]=V.toLowerCase());break}a[1][V]?a[1][V]=t(a[1][V],_[s][2]):a[1][V]=A(_[s][2])}}else if(p===ATTR_KEY)a[1][l[1]]=!0;else if(p===VAR&&l[1]===ATTR_KEY)a[1][l[2]]=!0;else if(p===CLOSE){if(selfClosing(a[0])&&i.length){var u=i[i.length-1][1];i.pop(),i[i.length-1][0][2][u]=T(a[0],a[1],a[2].length?a[2]:void 0)}}else if(p===VAR&&l[1]===TEXT)void 0===l[2]||null===l[2]?l[2]="":l[2]||(l[2]=t("",l[2])),Array.isArray(l[2][0])?a[2].push.apply(a[2],l[2]):a[2].push(l[2]);else if(p===TEXT)a[2].push(l[1]);else if(p!==ATTR_EQ&&p!==ATTR_BREAK)throw new Error("unhandled: "+p)}if(h[2].length>1&&/^\s*$/.test(h[2][0])&&h[2].shift(),h[2].length>2||2===h[2].length&&/\S/.test(h[2][1]))throw new Error("multiple root elements must be wrapped in an enclosing tag");return Array.isArray(h[2][0])&&"string"==typeof h[2][0][0]&&Array.isArray(h[2][0][2])&&(h[2][0]=T(h[2][0][0],h[2][0][1],h[2][0][2])),h[2][0]}};var hasOwn=Object.prototype.hasOwnProperty,closeRE=RegExp("^("+["area","base","basefont","bgsound","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr","animate","animateTransform","circle","cursor","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","font-face-format","font-face-name","font-face-uri","glyph","glyphRef","hkern","image","line","missing-glyph","mpath","path","polygon","polyline","rect","set","stop","tref","use","view","vkern"].join("|")+")(?:[.#][a-zA-Z0-9-￿_:-]+)*$");

},{"hyperscript-attribute-to-property":15}],15:[function(require,module,exports){
function attributeToProperty(r){return function(t,o,e){for(var n in o)n in transform&&(o[transform[n]]=o[n],delete o[n]);return r(t,o,e)}}module.exports=attributeToProperty;var transform={class:"className",for:"htmlFor","http-equiv":"httpEquiv"};
},{}],16:[function(require,module,exports){
function turnon(t,e){watch[t][0]&&0===watch[t][2]&&(watch[t][0](e),watch[t][2]=1)}function turnoff(t,e){watch[t][1]&&1===watch[t][2]&&(watch[t][1](e),watch[t][2]=0)}function eachAttr(t,e,a){var r=t.target.getAttribute(KEY_ATTR);return sameOrigin(t.oldValue,r)?void(watch[r]=watch[t.oldValue]):(watch[t.oldValue]&&a(t.oldValue,t.target),void(watch[r]&&e(r,t.target)))}function sameOrigin(t,e){return!(!t||!e)&&watch[t][3]===watch[e][3]}function eachMutation(t,e){for(var a=Object.keys(watch),r=0;r<t.length;r++){if(t[r]&&t[r].getAttribute&&t[r].getAttribute(KEY_ATTR)){var n=t[r].getAttribute(KEY_ATTR);a.forEach(function(a){n===a&&e(a,t[r])})}t[r].childNodes.length>0&&eachMutation(t[r].childNodes,e)}}var document=require("global/document"),window=require("global/window"),watch=Object.create(null),KEY_ID="onloadid"+(new Date%9e6).toString(36),KEY_ATTR="data-"+KEY_ID,INDEX=0;if(window&&window.MutationObserver){var observer=new MutationObserver(function(t){if(!(Object.keys(watch).length<1))for(var e=0;e<t.length;e++)t[e].attributeName!==KEY_ATTR?(eachMutation(t[e].removedNodes,turnoff),eachMutation(t[e].addedNodes,turnon)):eachAttr(t[e],turnon,turnoff)});observer.observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeOldValue:!0,attributeFilter:[KEY_ATTR]})}module.exports=function t(e,a,r,n){return a=a||function(){},r=r||function(){},e.setAttribute(KEY_ATTR,"o"+INDEX),watch["o"+INDEX]=[a,r,0,n||t.caller],INDEX+=1,e};

},{"global/document":12,"global/window":13}],17:[function(require,module,exports){
function empty(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function toElement(e){!range&&document.createRange&&(range=document.createRange(),range.selectNode(document.body));var t;return range&&range.createContextualFragment?t=range.createContextualFragment(e):(t=document.createElement("body"),t.innerHTML=e),t.childNodes[0]}function noop(){}function createElementNS(e,t){return t&&t!==XHTML?document.createElementNS(t,e):document.createElement(e)}function morphAttrs(e,t){var n,r,o,a,i,d,l=t.attributes;for(n=l.length-1;n>=0;n--)r=l[n],o=r.name,i=r.value,a=r.namespaceURI,a?(o=r.localName||o,d=e.getAttributeNS(a,o)):d=e.getAttribute(o),d!==i&&(a?e.setAttributeNS(a,o,i):e.setAttribute(o,i));for(l=e.attributes,n=l.length-1;n>=0;n--)r=l[n],r.specified!==!1&&(o=r.name,a=r.namespaceURI,hasAttributeNS(t,a,a?o=r.localName||o:o)||(a?e.removeAttributeNS(a,r.localName):e.removeAttribute(o)))}function moveChildren(e,t){for(var n=e.firstChild;n;){var r=n.nextSibling;t.appendChild(n),n=r}return t}function defaultGetNodeKey(e){return e.id}function morphdom(e,t,n){function r(e,t){var n=c(e);if(n?l[n]=e:t||p(e),e.nodeType===ELEMENT_NODE)for(var o=e.firstChild;o;)r(o,t||n),o=o.nextSibling}function o(e){if(e.nodeType===ELEMENT_NODE)for(var t=e.firstChild;t;)c(t)||(p(t),o(t)),t=t.nextSibling}function a(e,t,n){E(e)!==!1&&(t.removeChild(e),n?c(e)||(p(e),o(e)):r(e))}function i(e,t,n,r){var o=c(t);if(o&&delete l[o],!r){if(m(e,t)===!1)return;if(morphAttrs(e,t),s(e),h(e,t)===!1)return}if("TEXTAREA"!==e.nodeName){var d,E,v,T,A,g=t.firstChild,C=e.firstChild;e:for(;g;){for(v=g.nextSibling,d=c(g);C;){var y=c(C);if(E=C.nextSibling,!n&&y&&(A=u[y]))A.parentNode.replaceChild(C,A),i(C,A,n),C=E;else{var O=C.nodeType;if(O===g.nodeType){var M=!1;if(O===ELEMENT_NODE?(compareNodeNames(C,g)&&(y||d?d===y&&(M=!0):M=!0),M&&i(C,g,n)):O!==TEXT_NODE&&O!=COMMENT_NODE||(M=!0,C.nodeValue=g.nodeValue),M){g=v,C=E;continue e}}a(C,e,n),C=E}}d&&((T=l[d])?compareNodeNames(T,g)?(i(T,g,!0),g=T):(delete l[d],p(T)):u[d]=g),f(g)!==!1&&(e.appendChild(g),N(g)),g.nodeType===ELEMENT_NODE&&(d||g.firstChild)&&b.push(g),g=v,C=E}for(;C;)E=C.nextSibling,a(C,e,n),C=E}var S=specialElHandlers[e.nodeName];S&&S(e,t)}if(n||(n={}),"string"==typeof t)if("#document"===e.nodeName||"HTML"===e.nodeName){var d=t;t=document.createElement("html"),t.innerHTML=d}else t=toElement(t);var l={},u={},c=n.getNodeKey||defaultGetNodeKey,f=n.onBeforeNodeAdded||noop,N=n.onNodeAdded||noop,m=n.onBeforeElUpdated||n.onBeforeMorphEl||noop,s=n.onElUpdated||noop,E=n.onBeforeNodeDiscarded||noop,p=n.onNodeDiscarded||noop,h=n.onBeforeElChildrenUpdated||n.onBeforeMorphElChildren||noop,v=n.childrenOnly===!0,b=[],T=e,A=T.nodeType,g=t.nodeType;if(!v)if(A===ELEMENT_NODE)g===ELEMENT_NODE?compareNodeNames(e,t)||(p(e),T=moveChildren(e,createElementNS(t.nodeName,t.namespaceURI))):T=t;else if(A===TEXT_NODE||A===COMMENT_NODE){if(g===A)return T.nodeValue=t.nodeValue,T;T=t}if(T===t)p(e);else{i(T,t,!1,v);var C=function(e){for(var t=e.firstChild;t;){var n=t.nextSibling,r=c(t);if(r){var o=l[r];if(o&&compareNodeNames(t,o)){if(t.parentNode.replaceChild(o,t),i(o,t,!0),t=n,empty(l))return!1;continue}}t.nodeType===ELEMENT_NODE&&C(t),t=n}};if(!empty(l))e:for(;b.length;){var y=b;b=[];for(var O=0;O<y.length;O++)if(C(y[O])===!1)break e}for(var M in l)if(l.hasOwnProperty(M)){var S=l[M];p(S),o(S)}}return!v&&T!==e&&e.parentNode&&e.parentNode.replaceChild(T,e),T}var range,testEl="undefined"!=typeof document?document.body||document.createElement("div"):{},XHTML="http://www.w3.org/1999/xhtml",ELEMENT_NODE=1,TEXT_NODE=3,COMMENT_NODE=8,hasAttributeNS;hasAttributeNS=testEl.hasAttributeNS?function(e,t,n){return e.hasAttributeNS(t,n)}:testEl.hasAttribute?function(e,t,n){return e.hasAttribute(n)}:function(e,t,n){return!!e.getAttributeNode(n)};var specialElHandlers={OPTION:function(e,t){e.selected=t.selected,e.selected?e.setAttribute("selected",""):e.removeAttribute("selected","")},INPUT:function(e,t){e.checked=t.checked,e.checked?e.setAttribute("checked",""):e.removeAttribute("checked"),e.value!==t.value&&(e.value=t.value),hasAttributeNS(t,null,"value")||e.removeAttribute("value"),e.disabled=t.disabled,e.disabled?e.setAttribute("disabled",""):e.removeAttribute("disabled")},TEXTAREA:function(e,t){var n=t.value;e.value!==n&&(e.value=n),e.firstChild&&(e.firstChild.nodeValue=n)}},compareNodeNames=function(e,t){return e.nodeName===t.nodeName&&e.namespaceURI===t.namespaceURI};module.exports=morphdom;

},{}],18:[function(require,module,exports){
module.exports=["onclick","ondblclick","onmousedown","onmouseup","onmouseover","onmousemove","onmouseout","ondragstart","ondrag","ondragenter","ondragleave","ondragover","ondrop","ondragend","onkeydown","onkeypress","onkeyup","onunload","onabort","onerror","onresize","onscroll","onselect","onchange","onsubmit","onreset","onfocus","onblur","oninput","oncontextmenu","onfocusin","onfocusout"];
},{}],19:[function(require,module,exports){
module.exports=require("pull-stream");

},{"pull-stream":22}],20:[function(require,module,exports){
(function (process){
function start(n){function l(n){f(n)}function t(){[f,a,p,d,c,s].forEach(function(n){n.end()})}n=defined(n,{});var e=defined(n.init,defaultInit),i=defined(n.update,defaultUpdate),u=defined(n.view,noop),r=defined(n.run,noop),f=notify(),o=e.call(n),a=notify();pull(f.listen(),scan(o,function(l,t){return i.call(n,l.model,t)}),pull.drain(a));var p=notify();pull(a.listen(),pull.map(function(n){return n.model}),difference(),pull.drain(p));var d=notify();pull(p.listen(),pull.map(function(t){return u.call(n,t,l)}),pull.filter(isNotNil),pull.drain(d));var c=notify();pull(a.listen(),pull.map(function(n){return n.effect}),pull.filter(isNotNil),pull.drain(c));var s=notify();return pull(c.listen(),pull.map(function(l){return r.call(n,l,f.listen)}),pull.filter(isNotNil),pull.drain(s)),pull(s.listen(),drainMany(f)),process.nextTick(function(){a(o)}),{stop:t,actions:f.listen,states:a.listen,models:p.listen,views:d.listen,effects:c.listen,effectActionStreams:s.listen}}function noop(){}function isNotNil(n){return null!=n}function defaultInit(){return{model:null}}function defaultUpdate(n){return{model:n}}function scan(n,l){return pull.map(function(t){return n=l(n,t)})}function difference(){var n;return pull.filter(function(l){var t=l!==n;return n=l,t})}function drainMany(n){return function(l){pull(l,pull.drain(function(l){pull(l,pull.drain(n))}))}}var defined=require("defined"),pull=require("pull-stream"),notify=require("pull-notify");module.exports=start;
}).call(this,require('_process'))
},{"_process":3,"defined":8,"pull-notify":9,"pull-stream":22}],21:[function(require,module,exports){
function pullPushable(n){function u(n,u){n&&(i=n,f&&t(i)),f=u,l()}function l(){f&&(i?t(i):!o.length&&e?t(e):o.length&&t(null,o.shift()))}function t(u,l){var t=f;if(u&&n){var i=n;n=null,i(u===!0?null:u)}f=null,t(u,l)}var i,f,e,o=[];return u.end=function(n){e=e||n||!0,l()},u.push=function(n){if(!e){if(f)return void t(i,n);o.push(n),l()}},u}module.exports=pullPushable;

},{}],22:[function(require,module,exports){
"use strict";var sources=require("./sources"),sinks=require("./sinks"),throughs=require("./throughs");exports=module.exports=require("./pull");for(var k in sources)exports[k]=sources[k];for(var k in throughs)exports[k]=throughs[k];for(var k in sinks)exports[k]=sinks[k];
},{"./pull":23,"./sinks":28,"./sources":35,"./throughs":44}],23:[function(require,module,exports){
"use strict";module.exports=function r(n){var t=arguments.length;if("function"==typeof n&&1===n.length){for(var e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];return function(n){return e.unshift(n),r.apply(null,e)}}var u=n;u&&"function"==typeof u.source&&(u=u.source);for(var o=1;o<t;o++){var f=arguments[o];"function"==typeof f?u=f(u):f&&"object"==typeof f&&(f.sink(u),u=f.source)}return u};
},{}],24:[function(require,module,exports){
"use strict";var reduce=require("./reduce");module.exports=function(e){return reduce(function(e,r){return e.push(r),e},[],e)};

},{"./reduce":31}],25:[function(require,module,exports){
"use strict";var reduce=require("./reduce");module.exports=function(e){return reduce(function(e,r){return e+r},"",e)};

},{"./reduce":31}],26:[function(require,module,exports){
"use strict";module.exports=function(n,t){function o(u){return i=u,r?o.abort():void function o(){for(var u=!0,f=!1;u;)if(f=!1,i(null,function(e,c){if(f=!0,e=e||r){if(u=!1,t)t(e===!0?null:e);else if(e&&e!==!0)throw e}else n&&!1===n(c)||r?(u=!1,i(r||!0,t||function(){})):u||o()}),!f)return void(u=!1)}()}var i,r;return o.abort=function(n,t){if("function"==typeof n&&(t=n,n=!0),r=n||!0,i)return i(r,t||function(){})},o};

},{}],27:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop"),drain=require("./drain");module.exports=function(r,n){var i=!1;return n?r=prop(r)||id:(n=r,r=id),drain(function(u){if(r(u))return i=!0,n(null,u),!1},function(r){i||n(r===!0?null:r,null)})};

},{"../util/prop":51,"./drain":26}],28:[function(require,module,exports){
"use strict";module.exports={drain:require("./drain"),onEnd:require("./on-end"),log:require("./log"),find:require("./find"),reduce:require("./reduce"),collect:require("./collect"),concat:require("./concat")};

},{"./collect":24,"./concat":25,"./drain":26,"./find":27,"./log":29,"./on-end":30,"./reduce":31}],29:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(r){return drain(function(r){console.log(r)},r)};

},{"./drain":26}],30:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(r){return drain(null,r)};

},{"./drain":26}],31:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(n,r,i){return drain(function(i){r=n(r,i)},function(n){i(n,r)})};

},{"./drain":26}],32:[function(require,module,exports){
"use strict";module.exports=function(n){var r=0;return n=n||1/0,function(t,u){return t?u&&u(t):r>n?u(!0):void u(null,r++)}};

},{}],33:[function(require,module,exports){
"use strict";module.exports=function(){return function(t,n){n(!0)}};

},{}],34:[function(require,module,exports){
"use strict";module.exports=function(t){return function(n,u){u(t)}};

},{}],35:[function(require,module,exports){
"use strict";module.exports={keys:require("./keys"),once:require("./once"),values:require("./values"),count:require("./count"),infinite:require("./infinite"),empty:require("./empty"),error:require("./error")};

},{"./count":32,"./empty":33,"./error":34,"./infinite":36,"./keys":37,"./once":38,"./values":39}],36:[function(require,module,exports){
"use strict";module.exports=function(n){return n=n||Math.random,function(t,r){return t?r&&r(t):r(null,n())}};

},{}],37:[function(require,module,exports){
"use strict";var values=require("./values");module.exports=function(e){return values(Object.keys(e))};
},{"./values":39}],38:[function(require,module,exports){
"use strict";var abortCb=require("../util/abort-cb");module.exports=function(r,t){return function(u,e){if(u)return abortCb(e,u,t);if(null!=r){var l=r;r=null,e(null,l)}else e(!0)}};

},{"../util/abort-cb":50}],39:[function(require,module,exports){
"use strict";var abortCb=require("../util/abort-cb");module.exports=function(r,t){if(!r)return function(r,n){return r?abortCb(n,r,t):n(!0)};Array.isArray(r)||(r=Object.keys(r).map(function(t){return r[t]}));var n=0;return function(u,e){return u?abortCb(e,u,t):void e(n>=r.length||null,r[n++])}};

},{"../util/abort-cb":50}],40:[function(require,module,exports){
"use strict";function id(n){return n}var prop=require("../util/prop");module.exports=function(n){if(!n)return id;n=prop(n);var r,u,t=!1;return function(i){return function o(e,c){return u?c(u):void(e?(u=e,t?i(e,function(){t?r=c:c(e)}):i(e,c)):i(null,function(i,e){i?c(i):u?c(u):(t=!0,n(e,function(n,i){t=!1,u?(c(u),r(u)):n?o(n,c):c(null,i)}))}))}}};

},{"../util/prop":51}],41:[function(require,module,exports){
"use strict";var tester=require("../util/tester"),filter=require("./filter");module.exports=function(e){return e=tester(e),filter(function(r){return!e(r)})};

},{"../util/tester":52,"./filter":42}],42:[function(require,module,exports){
"use strict";var tester=require("../util/tester");module.exports=function(t){return t=tester(t),function(r){return function e(n,u){for(var i,o=!0;o;)o=!1,i=!0,r(n,function(r,n){return r||t(n)?void u(r,n):i?o=!0:e(r,u)}),i=!1}}};

},{"../util/tester":52}],43:[function(require,module,exports){
"use strict";var values=require("../sources/values"),once=require("../sources/once");module.exports=function(){return function(n){var u;return function(e,o){function r(){u(null,function(u,e){u===!0?t():u?n(!0,function(n){o(u)}):o(null,e)})}function t(){u=null,n(null,function(n,e){return n?o(n):(Array.isArray(e)||e&&"object"==typeof e?e=values(e):"function"!=typeof e&&(e=once(e)),u=e,void r())})}e?u?u(e,function(u){n(u||e,o)}):n(e,o):u?r():t()}}};

},{"../sources/once":38,"../sources/values":39}],44:[function(require,module,exports){
"use strict";module.exports={map:require("./map"),asyncMap:require("./async-map"),filter:require("./filter"),filterNot:require("./filter-not"),through:require("./through"),take:require("./take"),unique:require("./unique"),nonUnique:require("./non-unique"),flatten:require("./flatten")};

},{"./async-map":40,"./filter":42,"./filter-not":41,"./flatten":43,"./map":45,"./non-unique":46,"./take":47,"./through":48,"./unique":49}],45:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop");module.exports=function(r){return r?(r=prop(r),function(n){return function(t,u){n(t,function(t,i){try{i=t?null:r(i)}catch(r){return n(r,function(){return u(r)})}u(t,i)})}}):id};

},{"../util/prop":51}],46:[function(require,module,exports){
"use strict";var unique=require("./unique");module.exports=function(u){return unique(u,!0)};

},{"./unique":49}],47:[function(require,module,exports){
"use strict";module.exports=function(n,u){u=u||{};var t=u.last||!1,r=!1;if("number"==typeof n){t=!0;var o=n;n=function(){return--o}}return function(u){function o(n){u(!0,function(u){t=!1,n(u||!0)})}return function(f,i){r?t?o(i):i(r):(r=f)?u(r,i):u(null,function(u,f){(r=r||u)?i(r):n(f)?i(null,f):(r=!0,t?i(null,f):o(i))})}}};

},{}],48:[function(require,module,exports){
"use strict";module.exports=function(n,t){function u(n){!r&&t&&(r=!0,t(n===!0?null:n))}var r=!1;return function(t){return function(r,o){return r&&u(r),t(r,function(t,r){t?u(t):n&&n(r),o(t,r)})}}};

},{}],49:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop"),filter=require("./filter");module.exports=function(r,e){r=prop(r)||id;var t={};return filter(function(i){var u=r(i);return t[u]?!!e:(t[u]=!0,!e)})};

},{"../util/prop":51,"./filter":42}],50:[function(require,module,exports){
module.exports=function(l,n,o){l(n),o&&o(n===!0?null:n)};
},{}],51:[function(require,module,exports){
module.exports=function(e){return e&&("string"==typeof e?function(t){return t[e]}:"object"==typeof e&&"function"==typeof e.exec?function(t){var n=e.exec(t);return n&&n[0]}:e)};

},{}],52:[function(require,module,exports){
function id(t){return t}var prop=require("./prop");module.exports=function(t){return"object"==typeof t&&"function"==typeof t.test?function(r){return t.test(r)}:prop(t)||id};

},{"./prop":51}],53:[function(require,module,exports){
function formatHash(e){return hashMatch(e).slice(1)||null}var hashMatch=require("hash-match"),Pushable=require("pull-pushable");module.exports={init:function(){return{model:formatHash(window.location.hash),effect:{type:"router:init"}}},update:function(e,t){switch(t.type){case"router:set":return{model:t.payload};default:return{model:e}}},run:function(e,t){if("router:init"===e.type){var n,r=function(){var e=function(){n.push({type:"router:set",payload:formatHash(window.location.hash)})};return n=Pushable(function(t){window.removeEventListener(e)}),window.addEventListener("hashchange",e),{v:n}}();if("object"==typeof r)return r.v}}};
},{"hash-match":4,"pull-pushable":21}],54:[function(require,module,exports){
function _taggedTemplateLiteral(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function contributorsList(e){return html(_templateObject,"contrib "+prefix,e.slice(0,20).sort(shuffle).map(function(e){return html(_templateObject2,e.name,"https://github.com/"+e.name,e.image)}))}function shuffle(){return Math.random()-.5}var _templateObject=_taggedTemplateLiteral(["\n    <div class=",">\n      <ul>\n        ","\n      </ul>\n    </div>\n  "],["\n    <div class=",">\n      <ul>\n        ","\n      </ul>\n    </div>\n  "]),_templateObject2=_taggedTemplateLiteral(["\n          <li>\n            <a target='_blank' title="," href=",">\n              <img src="," />\n            </a>\n          </li>\n        "],["\n          <li>\n            <a target='_blank' title="," href=",">\n              <img src="," />\n            </a>\n          </li>\n        "]),html=require("inu/html"),css=0,prefix=(null||!0)&&"_c8360755";module.exports=contributorsList;

},{"insert-css":5,"inu/html":6}],55:[function(require,module,exports){
function modulePage(n){var l=document.createElement("article");l.innerHTML=n.readme;var e=l.querySelector(".title"),o=e.querySelector(".contrib");return e.replaceChild(contribList(n.contributors),o),l}var css=0,contribList=require("./contributor-list");(null||!0)&&"_27b2e4d9",module.exports=modulePage;

},{"./contributor-list":54,"insert-css":5}],56:[function(require,module,exports){
function _taggedTemplateLiteral(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function nav(e){return html(_templateObject,e.categories.map(function(n){return html(_templateObject2,n,e.modules.filter(function(e){return e.category===n}).map(function(e){return html(_templateObject3,"#"+e.name,e.name)}))}))}var _templateObject=_taggedTemplateLiteral(["\n    <nav>\n      <a class='logo' href='/'>\n        <h1>pull-stream</h1>\n      </a>\n      <ul class='categories'>\n        ","\n      </ul>\n    </nav>\n  "],["\n    <nav>\n      <a class='logo' href='/'>\n        <h1>pull-stream</h1>\n      </a>\n      <ul class='categories'>\n        ","\n      </ul>\n    </nav>\n  "]),_templateObject2=_taggedTemplateLiteral(["\n          <li class='category'>\n            <h2>","</h2>\n            <ul class='modules'>\n              ","\n            </ul>\n          </li>\n        "],["\n          <li class='category'>\n            <h2>","</h2>\n            <ul class='modules'>\n              ","\n            </ul>\n          </li>\n        "]),_templateObject3=_taggedTemplateLiteral(["\n                    <a href=",">\n                      <li>","</li>\n                    </a>\n                  "],["\n                    <a href=",">\n                      <li>","</li>\n                    </a>\n                  "]),html=require("inu").html;module.exports=nav;

},{"inu":7}],57:[function(require,module,exports){
function _taggedTemplateLiteral(s,a){return Object.freeze(Object.defineProperties(s,{raw:{value:Object.freeze(a)}}))}function deIndexContributors(s,a){return a.map(function(a){return s[a]})}var _templateObject=_taggedTemplateLiteral(["\n      <main class=",">\n        ","\n        ","\n      </main>\n    "],["\n      <main class=",">\n        ","\n        ","\n      </main>\n    "]),inu=require("inu"),pull=inu.pull,find=require("array-find"),css=0;(null||!0)&&"_c5770200";var model=JSON.parse('{"contributors":[{"name":"dominictarr","image":"https://avatars.githubusercontent.com/u/259374?v=3"},{"name":"regular","image":"https://avatars.githubusercontent.com/u/122962?v=3"},{"name":"0x00A","image":"https://avatars.githubusercontent.com/u/136109?v=3"},{"name":"timoxley","image":"https://avatars.githubusercontent.com/u/43438?v=3"},{"name":"ahdinosaur","image":"https://avatars.githubusercontent.com/u/719605?v=3"},{"name":"yoshuawuyts","image":"https://avatars.githubusercontent.com/u/2467194?v=3"},{"name":"zetxx","image":"https://avatars.githubusercontent.com/u/704384?v=3"},{"name":"joliss","image":"https://avatars.githubusercontent.com/u/524783?v=3"},{"name":"anko","image":"https://avatars.githubusercontent.com/u/5231746?v=3"},{"name":"ungoldman","image":"https://avatars.githubusercontent.com/u/427322?v=3"},{"name":"matthewmueller","image":"https://avatars.githubusercontent.com/u/170299?v=3"},{"name":"TehShrike","image":"https://avatars.githubusercontent.com/u/1141869?v=3"},{"name":"nrn","image":"https://avatars.githubusercontent.com/u/357596?v=3"},{"name":"pfrazee","image":"https://avatars.githubusercontent.com/u/1270099?v=3"},{"name":"noffle","image":"https://avatars.githubusercontent.com/u/489362?v=3"},{"name":"tounano","image":"https://avatars.githubusercontent.com/u/5513418?v=3"},{"name":"dignifiedquire","image":"https://avatars.githubusercontent.com/u/790842?v=3"},{"name":"mvayngrib","image":"https://avatars.githubusercontent.com/u/83948?v=3"},{"name":"CoderPuppy","image":"https://avatars.githubusercontent.com/u/714198?v=3"},{"name":"clehner","image":"https://avatars.githubusercontent.com/u/95347?v=3"},{"name":"csabapalfi","image":"https://avatars.githubusercontent.com/u/181959?v=3"},{"name":"toddself","image":"https://avatars.githubusercontent.com/u/193412?v=3"},{"name":"DamonOehlman","image":"https://avatars.githubusercontent.com/u/609693?v=3"},{"name":"RichardLitt","image":"https://avatars.githubusercontent.com/u/910753?v=3"},{"name":"reqshark","image":"https://avatars.githubusercontent.com/u/937826?v=3"},{"name":"sastan","image":"https://avatars.githubusercontent.com/u/514405?v=3"},{"name":"queckezz","image":"https://avatars.githubusercontent.com/u/2580598?v=3"},{"name":"iankronquist","image":"https://avatars.githubusercontent.com/u/5192353?v=3"},{"name":"adjohnson916","image":"https://avatars.githubusercontent.com/u/615381?v=3"}],"categories":["core","combinators","real-time","file system and databases","text","binary","networks","interop","crypto"],"modules":[{"user":"pull-stream","name":"pull-stream","path":"pull-stream/pull-stream","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream\\">pull-stream</a><div class=\\"contrib\\"></div></h1>\\n<p>Minimal Pipeable Pull-stream</p>\\n<p>In <a href=\\"https://github.com/nodejs/node-v0.x-archive/blob/v0.8/doc/api/stream.markdown\\">classic-streams</a>,\\nstreams <em>push</em> data to the next stream in the pipeline.\\nIn <a href=\\"https://github.com/nodejs/node-v0.x-archive/blob/v0.10/doc/api/stream.markdown\\">new-streams</a>,\\ndata is pulled out of the source stream, into the destination.\\n<code>pull-stream</code> is a minimal take on streams,\\npull streams work great for &quot;object&quot; streams as well as streams of raw text or binary data.</p>\\n<p><a href=\\"http://travis-ci.org/dominictarr/pull-stream\\"></a></p>\\n<h2>Quick Example</h2>\\n<p>Stat some files:</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.values([<span class=\\"hljs-string\\">&apos;file1&apos;</span>, <span class=\\"hljs-string\\">&apos;file2&apos;</span>, <span class=\\"hljs-string\\">&apos;file3&apos;</span>]),\\n  pull.asyncMap(fs.stat),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, array</span>) </span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(array)\\n  })\\n)</code></pre>\\n<p>note that <code>pull(a, b, c)</code> is basically the same as <code>a.pipe(b).pipe(c)</code>.</p>\\n<p>to grok how pull-streams work, read through <a href=\\"https://github.com/dominictarr/pull-stream-examples\\">pull-streams by example</a></p>\\n<h2>How do I do X with pull-streams?</h2>\\n<p>There is a module for that!</p>\\n<p>Check the <a href=\\"https://github.com/pull-stream/pull-stream-faq\\">pull-stream FAQ</a>\\nand post an issue if you have a question that is not on that.</p>\\n<h2>Compatibily with node streams</h2>\\n<p>pull-streams are not <em>directly</em> compatible with node streams,\\nbut pull-streams can be converted into node streams with\\n<a href=\\"https://github.com/dominictarr/pull-stream-to-stream\\">pull-stream-to-stream</a>\\nand node streams can be converted into pull-stream using <a href=\\"https://github.com/dominictarr/stream-to-pull-stream\\">stream-to-pull-stream</a>\\ncorrect back pressure is preserved.</p>\\n<h3>Readable &amp; Reader vs. Readable &amp; Writable</h3>\\n<p>Instead of a readable stream, and a writable stream, there is a <code>readable</code> stream,\\n(aka &quot;Source&quot;) and a <code>reader</code> stream (aka &quot;Sink&quot;). Through streams\\nis a Sink that returns a Source.</p>\\n<p>See also:</p>\\n<ul>\\n<li><a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/sources/index.md\\">Sources</a></li>\\n<li><a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/throughs/index.md\\">Throughs</a></li>\\n<li><a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/sinks/index.md\\">Sinks</a></li>\\n</ul>\\n<h3>Source (aka, Readable)</h3>\\n<p>The readable stream is just a <code>function read(end, cb)</code>,\\nthat may be called many times,\\nand will (asynchronously) <code>cb(null, data)</code> once for each call.</p>\\n<p>To signify an end state, the stream eventually returns <code>cb(err)</code> or <code>cb(true)</code>.\\nWhen indicating a terminal state, <code>data</code> <em>must</em> be ignored.</p>\\n<p>The <code>read</code> function <em>must not</em> be called until the previous call has called back.\\nUnless, it is a call to abort the stream (<code>read(truthy, cb)</code>).</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//a stream of random numbers.</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">random</span> (<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end, cb</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(end) <span class=\\"hljs-keyword\\">return</span> cb(end)\\n    <span class=\\"hljs-comment\\">//only read n times, then stop.</span>\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-number\\">0</span>&gt;--n) <span class=\\"hljs-keyword\\">return</span> cb(<span class=\\"hljs-literal\\">true</span>)\\n    cb(<span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-built_in\\">Math</span>.random())\\n  }\\n}</code></pre>\\n<h3>Sink; (aka, Reader, &quot;writable&quot;)</h3>\\n<p>A sink is just a <code>reader</code> function that calls a Source (read function),\\nuntil it decideds to stop, or the readable ends. <code>cb(err || true)</code></p>\\n<p>All <a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/throughs/index.md\\">Throughs</a>\\nand <a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/sinks/index.md\\">Sinks</a>\\nare reader streams.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//read source and log it.</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">logger</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">read</span>) </span>{\\n    read(<span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">next</span>(<span class=\\"hljs-params\\">end, data</span>) </span>{\\n      <span class=\\"hljs-keyword\\">if</span>(end === <span class=\\"hljs-literal\\">true</span>) <span class=\\"hljs-keyword\\">return</span>\\n      <span class=\\"hljs-keyword\\">if</span>(end) <span class=\\"hljs-keyword\\">throw</span> end\\n\\n      <span class=\\"hljs-built_in\\">console</span>.log(data)\\n      read(<span class=\\"hljs-literal\\">null</span>, next)\\n    })\\n  }\\n}</code></pre>\\n<p>Since these are just functions, you can pass them to each other!</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> rand = random(<span class=\\"hljs-number\\">100</span>)\\n<span class=\\"hljs-keyword\\">var</span> log = logger()\\n\\nlog(rand) <span class=\\"hljs-comment\\">//&quot;pipe&quot; the streams.</span></code></pre>\\n<p>but, it&apos;s easier to read if you use&apos;s pull-stream&apos;s <code>pull</code> method</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\npull(random(), logger())</code></pre>\\n<h3>Through</h3>\\n<p>A through stream is a reader on one end and a readable on the other.\\nIt&apos;s Sink that returns a Source.\\nThat is, it&apos;s just a function that takes a <code>read</code> function,\\nand returns another <code>read</code> function.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">map</span> (<span class=\\"hljs-params\\">read, map</span>) </span>{\\n  <span class=\\"hljs-comment\\">//return a readable function!</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end, cb</span>) </span>{\\n    read(end, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end, data</span>) </span>{\\n      cb(end, data != <span class=\\"hljs-literal\\">null</span> ? map(data) : <span class=\\"hljs-literal\\">null</span>)\\n    })\\n  }\\n}</code></pre>\\n<h3>Pipeability</h3>\\n<p>Every pipeline must go from a <code>source</code> to a <code>sink</code>.\\nData will not start moving until the whole thing is connected.</p>\\n<pre><code class=\\"hljs language-js\\">pull(source, through, sink)</code></pre>\\n<p>some times, it&apos;s simplest to describe a stream in terms of other streams.\\npull can detect what sort of stream it starts with (by counting arguments)\\nand if you pull together through streams, it gives you a new through stream.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> tripleThrough =\\n  pull(through1(), through2(), through3())\\n<span class=\\"hljs-comment\\">//THE THREE THROUGHS BECOME ONE</span>\\n\\npull(source(), tripleThrough, sink())</code></pre>\\n<p>pull detects if it&apos;s missing a Source by checking function arity,\\nif the function takes only one argument it&apos;s either a sink or a through.\\nOtherwise it&apos;s a Source.</p>\\n<h2>Duplex Streams</h2>\\n<p>Duplex streams, which are used to communicate between two things,\\n(i.e. over a network) are a little different. In a duplex stream,\\nmessages go both ways, so instead of a single function that represents the stream,\\nyou need a pair of streams. <code>{source: sourceStream, sink: sinkStream}</code></p>\\n<p>pipe duplex streams like this:</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> a = duplex()\\n<span class=\\"hljs-keyword\\">var</span> b = duplex()\\n\\npull(a.source, b.sink)\\npull(b.source, a.sink)\\n\\n<span class=\\"hljs-comment\\">//which is the same as</span>\\n\\nb.sink(a.source); a.sink(b.source)\\n\\n<span class=\\"hljs-comment\\">//but the easiest way is to allow pull to handle this</span>\\n\\npull(a, b, a)\\n\\n<span class=\\"hljs-comment\\">//&quot;pull from a to b and then back to a&quot;</span></code></pre>\\n<h2>Design Goals &amp; Rationale</h2>\\n<p>There is a deeper,\\n<a href=\\"http://en.wikipedia.org/wiki/Platonic_idealism\\">platonic abstraction</a>,\\nwhere a streams is just an array in time, instead of in space.\\nAnd all the various streaming &quot;abstractions&quot; are just crude implementations\\nof this abstract idea.</p>\\n<p><a href=\\"https://github.com/joyent/node/blob/v0.8.16/doc/api/stream.markdown\\">classic-streams</a>,\\n<a href=\\"https://github.com/joyent/node/blob/v0.10/doc/api/stream.markdown\\">new-streams</a>,\\n<a href=\\"https://github.com/Gozala/reducers\\">reducers</a></p>\\n<p>The objective here is to find a simple realization of the best features of the above.</p>\\n<h3>Type Agnostic</h3>\\n<p>A stream abstraction should be able to handle both streams of text and streams\\nof objects.</p>\\n<h3>A pipeline is also a stream.</h3>\\n<p>Something like this should work: <code>a.pipe(x.pipe(y).pipe(z)).pipe(b)</code>\\nthis makes it possible to write a custom stream simply by\\ncombining a few available streams.</p>\\n<h3>Propagate End/Error conditions.</h3>\\n<p>If a stream ends in an unexpected way (error),\\nthen other streams in the pipeline should be notified.\\n(this is a problem in node streams - when an error occurs,\\nthe stream is disconnected, and the user must handle that specially)</p>\\n<p>Also, the stream should be able to be ended from either end.</p>\\n<h3>Transparent Backpressure &amp; Laziness</h3>\\n<p>Very simple transform streams must be able to transfer back pressure\\ninstantly.</p>\\n<p>This is a problem in node streams, pause is only transfered on write, so\\non a long chain (<code>a.pipe(b).pipe(c)</code>), if <code>c</code> pauses, <code>b</code> will have to write to it\\nto pause, and then <code>a</code> will have to write to <code>b</code> to pause.\\nIf <code>b</code> only transforms <code>a</code>&apos;s output, then <code>a</code> will have to write to <code>b</code> twice to\\nfind out that <code>c</code> is paused.</p>\\n<p><a href=\\"https://github.com/Gozala/reducers\\">reducers</a> reducers has an interesting method,\\nwhere synchronous tranformations propagate back pressure instantly!</p>\\n<p>This means you can have two &quot;smart&quot; streams doing io at the ends, and lots of dumb\\nstreams in the middle, and back pressure will work perfectly, as if the dumb streams\\nare not there.</p>\\n<p>This makes laziness work right.</p>\\n<h3>handling end, error, and abort.</h3>\\n<p>in pull streams, any part of the stream (source, sink, or through)\\nmay terminate the stream. (this is the case with node streams too,\\nbut it&apos;s not handled well).</p>\\n<h4>source: end, error</h4>\\n<p>A source may end (<code>cb(true)</code> after read) or error (<code>cb(error)</code> after read)\\nAfter ending, the source <em>must</em> never <code>cb(null, data)</code></p>\\n<h4>sink: abort</h4>\\n<p>Sinks do not normally end the stream, but if they decide they do\\nnot need any more data they may &quot;abort&quot; the source by calling <code>read(true, cb)</code>.\\nA abort (<code>read(true, cb)</code>) may be called before a preceding read call\\nhas called back.</p>\\n<h3>handling end/abort/error in through streams</h3>\\n<p>Rules for implementing <code>read</code> in a through stream:\\n1) Sink wants to stop. sink aborts the through</p>\\n<pre><code>just forward the exact read() call to your source,\\nany future read calls should cb(true).\\n</code></pre>\\n<p>2) We want to stop. (abort from the middle of the stream)</p>\\n<pre><code>abort your source, and then cb(true) to tell the sink we have ended.\\nIf the source errored during abort, end the sink by cb read with `cb(err)`.\\n(this will be an ordinary end/error for the sink)\\n</code></pre>\\n<p>3) Source wants to stop. (<code>read(null, cb) -&gt; cb(err||true)</code>)</p>\\n<pre><code>forward that exact callback towards the sink chain,\\nwe must respond to any future read calls with `cb(err||true)`.\\n</code></pre>\\n<p>In none of the above cases data is flowing!\\n4) If data is flowing (normal operation:   <code>read(null, cb) -&gt; cb(null, data)</code></p>\\n<pre><code>forward data downstream (towards the Sink)\\ndo none of the above!\\n</code></pre>\\n<p>There either is data flowing (4) OR you have the error/abort cases (1-3), never both.</p>\\n<h2>1:1 read-callback ratio</h2>\\n<p>A pull stream source (and thus transform) returns <em>exactly one value</em> per read.</p>\\n<p>This differs from node streams, which can use <code>this.push(value)</code> and in internal\\nbuffer to create transforms that write many values from a single read value.</p>\\n<p>Pull streams don&apos;t come with their own buffering mechanism, but <a href=\\"https://github.com/dominictarr/pull-stream-examples/blob/master/buffering.js\\">there are ways\\nto get around this</a>.</p>\\n<h2>Further Examples</h2>\\n<ul>\\n<li><a href=\\"https://github.com/dominictarr/pull-stream-examples\\">dominictarr/pull-stream-examples</a></li>\\n<li><a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/examples.md\\">./docs/examples</a></li>\\n</ul>\\n<p>Explore this repo further for more information about\\n<a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/sources/index.md\\">sources</a>,\\n<a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/throughs/index.md\\">throughs</a>,\\n<a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/sinks/index.md\\">sinks</a>, and\\n<a href=\\"http://github.com/pull-stream/pull-stream/blob/master/./docs/glossary.md\\">glossary</a>.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":"3.4.3","npmName":"pull-stream","category":null},{"user":"pull-stream","name":"pull-cat","path":"pull-stream/pull-cat","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-cat\\">pull-cat</a><div class=\\"contrib\\"></div></h1>\\n<blockquote>\\n<p>Concatenate pull-streams</p>\\n</blockquote>\\n<h2>Install</h2>\\n<pre><code class=\\"hljs language-shell\\">npm install --save pull-cat</code></pre>\\n<h2>Example</h2>\\n<p>Construct a new source stream from a sequential list of source streams,\\nreading from each one in turn until it ends, then the next, etc.\\nIf one stream errors, then the rest of the streams are aborted immediately.\\nIf the cat stream is aborted (i.e. if it&apos;s sink errors) then all the streams\\nare aborted.</p>\\n<p>A cat stream is a moderately challenging stream to implement,\\nespecially in the context of error states.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> cat = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-cat&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\npull(\\n  cat([\\n    pull.values([<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">3</span>]),\\n    pull.values([<span class=\\"hljs-number\\">4</span>,<span class=\\"hljs-number\\">5</span>,<span class=\\"hljs-number\\">6</span>])\\n  ]),\\n  pull.log()\\n)\\n<span class=\\"hljs-comment\\">// 1</span>\\n<span class=\\"hljs-comment\\">// 2</span>\\n<span class=\\"hljs-comment\\">// 3</span>\\n<span class=\\"hljs-comment\\">// 4</span>\\n<span class=\\"hljs-comment\\">// 5</span>\\n<span class=\\"hljs-comment\\">// 6</span></code></pre>\\n<h2>Api</h2>\\n<h3><code>cat = require(&apos;pull-cat&apos;)</code></h3>\\n<h3><code>stream = cat(streams)</code></h3>\\n<p>Reads from each stream in <code>streams</code> until finished.</p>\\n<p>If a stream errors, stop all the streams.\\nif the concatenated stream is aborted, abort all the streams,\\nthen callback to the aborter.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,4,16,17],"version":"1.1.11","npmName":"pull-cat","category":"combinators"},{"user":"pull-stream","name":"pull-defer","path":"pull-stream/pull-defer","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-defer\\">pull-defer</a><div class=\\"contrib\\"></div></h1>\\n<p>create a placeholder for a pull stream that won&apos;t start moving until later.</p>\\n<h2>examples</h2>\\n<p><code>pull-defer</code> can be used with source, sinks and transform streams.</p>\\n<h3>through</h3>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//create a deferred through stream</span>\\n<span class=\\"hljs-keyword\\">var</span> deferred = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-defer&apos;</span>).through()\\n\\npull(\\n  input,\\n  deferred,\\n  output\\n)\\n\\n<span class=\\"hljs-comment\\">//nothing will happen until deferred.resolve(stream) is called.</span>\\ndeferred.resolve(transform)</code></pre>\\n<h3>source</h3>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//create a deferred through stream</span>\\n<span class=\\"hljs-keyword\\">var</span> deferred = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-defer&apos;</span>).source()\\n\\npull(\\n  deferred,\\n  output\\n)\\n\\n<span class=\\"hljs-comment\\">//nothing will happen until deferred.resolve(stream) is called.</span>\\ndeferred.resolve(input)</code></pre>\\n<h3>sink</h3>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//create a deferred through stream</span>\\n<span class=\\"hljs-keyword\\">var</span> deferred = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-defer&apos;</span>).sink()\\n\\npull(\\n  input,\\n  deferred\\n)\\n\\n<span class=\\"hljs-comment\\">//nothing will happen until deferred.start(stream) is called.</span>\\ndeferred.resolve(output)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,18],"version":"0.2.2","npmName":"pull-defer","category":"combinators"},{"user":"pull-stream","name":"pull-many","path":"pull-stream/pull-many","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-many\\">pull-many</a><div class=\\"contrib\\"></div></h1>\\n<p>Combine many streams into one stream, as they come, while respecting back pressure.</p>\\n<p>A chunk is read from each stream,\\nand the next available chunk is\\nselected in a round-robbin.</p>\\n<p>If a any stream errors, then all the remaining streams are aborted,\\nand then the sink is passed the error. If you want instead to drop the\\nerroring stream, and continue reading from the other streams, you should\\npipe each stream through a stream that handles the error(ignores, logs, whatever)\\nand then ends normally.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> many = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-many&apos;</span>)\\n\\npull(\\n  many([\\n    pull.values([<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">3</span>]),\\n    pull.values([<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">3</span>,<span class=\\"hljs-number\\">5</span>]),\\n    pull.values([<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">4</span>,<span class=\\"hljs-number\\">6</span>])\\n  ]),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, ary</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err\\n    <span class=\\"hljs-built_in\\">console</span>.log(ary)\\n    <span class=\\"hljs-comment\\">//=&gt; [1, 1, 2, 2, 3, 4, 3, 5, 6]</span>\\n  })\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.6","npmName":"pull-many","category":"combinators"},{"user":"pull-stream","name":"pull-merge","path":"pull-stream/pull-merge","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-merge\\">pull-merge</a><div class=\\"contrib\\"></div></h1>\\n<p>merge sorted pull-streams into one pull stream, while maintaining back-pressure.\\nSource pull streams MUST be in order.</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> merge = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-merge&apos;</span>)\\n\\npull(\\n  merge(pull.values([<span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">5</span>, <span class=\\"hljs-number\\">6</span>]), pull.values([<span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">4</span>, <span class=\\"hljs-number\\">7</span>])),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, ary</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err\\n\\n    <span class=\\"hljs-built_in\\">console</span>.log(ary)\\n    <span class=\\"hljs-comment\\">//=&gt; [1, 2, 4, 5, 6, 7]</span>\\n  })\\n)</code></pre>\\n<h2>signatures</h2>\\n<h3>merge(left, right, compare?)</h3>\\n<p>return a stream that is the merge of left and right streams.\\nmerge pulls a chunk from both <code>left</code> and <code>right</code> and then\\ncompares them. <code>compare</code> has the same signature as <code>Array#sort(compare)</code>.\\nIf the two chunks are compared the same, the chunk from the right stream\\nis taken, but the left chunk is dropped.\\nOtherwise, the lowest chunk is passed to the stream.</p>\\n<h3>merge([streams...], compare?)</h3>\\n<p>Merge a collection of steams. This calls the first signature recursively.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.2","npmName":"pull-merge","category":"combinators"},{"user":"pull-stream","name":"pull-paramap","path":"pull-stream/pull-paramap","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-paramap\\">pull-paramap</a><div class=\\"contrib\\"></div></h1>\\n<p>parallel mapping pull-stream.</p>\\n<p><a href=\\"https://travis-ci.org/dominictarr/pull-paramap\\">\\n</a></p>\\n<p><a href=\\"http://ci.testling.com/dominictarr/pull-paramap\\">\\n</a></p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> paramap = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-paramap&apos;</span>)\\n\\npull(\\n  pull.values([....]),\\n  <span class=\\"hljs-comment\\">//perform an async job in parallel,</span>\\n  <span class=\\"hljs-comment\\">//but return results in the same order as they went in.</span>\\n  paramap(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">data, cb</span>) </span>{\\n    asyncJob(data, cb)\\n  }, width), <span class=\\"hljs-comment\\">//optional number.</span>\\n             <span class=\\"hljs-comment\\">//limits stream to process width items at once</span>\\n  pull.collect(cb)\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,19],"version":"1.1.6","npmName":"pull-paramap","category":"combinators"},{"user":"pull-stream","name":"pull-pair","path":"pull-stream/pull-pair","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-pair\\">pull-pair</a><div class=\\"contrib\\"></div></h1>\\n<p>A pair of {source, sink} streams that are internally connected,\\n(what goes into the sink comes out the source)</p>\\n<p>This can be used to construct pipelines that are connected.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pair = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-pair&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> p = pair()\\n\\n<span class=\\"hljs-comment\\">//read values into this sink...</span>\\npull(pull.values([<span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span>]), p.sink)\\n\\n<span class=\\"hljs-comment\\">//but that should become the source over here.</span>\\npull(p.source, pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, values</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err\\n  <span class=\\"hljs-built_in\\">console</span>.log(values) <span class=\\"hljs-comment\\">//[1, 2, 3]</span>\\n}))</code></pre>\\n<p>This is particularily useful for creating duplex streams especilaly\\naround servers. Use <code>pull-pair/duplex</code> to get two duplex streams\\nthat are attached to each other.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> DuplexPair = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-pair/duplex&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> d = DuplexPair()\\n\\n<span class=\\"hljs-comment\\">//the &quot;client&quot;: pipe to the first duplex and get the response.</span>\\npull(\\n  pull.values([<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">3</span>]),\\n  d[<span class=\\"hljs-number\\">0</span>],\\n  pull.collect(<span class=\\"hljs-built_in\\">console</span>.log) <span class=\\"hljs-comment\\">// =&gt; 10, 20, 30</span>\\n)\\n\\n<span class=\\"hljs-comment\\">//the &quot;server&quot;: pipe from the second stream back to itself</span>\\n<span class=\\"hljs-comment\\">//(in this case) appling a transformation.</span>\\npull(\\n  d[<span class=\\"hljs-number\\">1</span>],\\n  pull.map(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">e</span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> e*<span class=\\"hljs-number\\">10</span>\\n  }),\\n  d[<span class=\\"hljs-number\\">1</span>]\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.1.0","npmName":"pull-pair","category":"combinators"},{"user":"pull-stream","name":"pull-through","path":"pull-stream/pull-through","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-through\\">pull-through</a><div class=\\"contrib\\"></div></h1>\\n<p><a href=\\"https://github.com/dominictarr/through\\">through</a> ported to\\n<a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a> style.</p>\\n<h2>Example</h2>\\n<p>Same Good Old Api, Brand New Underlying Mechanism.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> through = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-through&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> ts = through(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">data</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.queue(data)\\n}, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.queue(<span class=\\"hljs-literal\\">null</span>)\\n})</code></pre>\\n<h2>Incompatibility</h2>\\n<h3>DON&apos;T</h3>\\n<p>use <code>var self = this</code>, don&apos;t keep a reference.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> WRONG = through(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">data</span>) </span>{ WRONG.queue(data) })</code></pre>\\n<h3>DO</h3>\\n<pre><code class=\\"hljs language-js\\">through(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">data</span>) </span>{ <span class=\\"hljs-keyword\\">this</span>.queue(data) })</code></pre>\\n<p>Maybe this will change. this is a little more tricky with pull-streams, though.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.18","npmName":"pull-through","category":"combinators"},{"user":"pull-stream","name":"pull-traverse","path":"pull-stream/pull-traverse","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-traverse\\">pull-traverse</a><div class=\\"contrib\\"></div></h1>\\n<p><a href=\\"https://travis-ci.org/dominictarr/pull-traverse\\"></a></p>\\n<h2>depthFirst, widthFirst, leafFirst (start, createStream)</h2>\\n<p>Traverse a tree structure. <code>start</code> is a value that represents\\na node. <code>createStream</code> is a function that returns\\na pull-stream of the children of a node.\\n<code>start</code> must be the same type output by <code>createStream</code>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pt   = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-traverse&apos;</span>)\\n\\npull(\\n  pt.widthFirst(objects, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">object</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(object &amp;&amp; <span class=\\"hljs-string\\">&apos;object&apos;</span> === <span class=\\"hljs-keyword\\">typeof</span> object)\\n      <span class=\\"hljs-keyword\\">return</span> pull.values(object)\\n    <span class=\\"hljs-keyword\\">return</span> pull.empty()\\n  }),\\n  pull.log()\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.3","npmName":"pull-traverse","category":"combinators"},{"user":"pull-stream","name":"pull-window","path":"pull-stream/pull-window","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-window\\">pull-window</a><div class=\\"contrib\\"></div></h1>\\n<p>Aggregate a pull-stream into windows.</p>\\n<p>Several helpers are provided for particular types of windows,\\nsliding, tumbling, etc.</p>\\n<p>And also, a low level</p>\\n<h2>Example: &quot;tumbling&quot; window</h2>\\n<p>sum every 10 items.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull   = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> <span class=\\"hljs-built_in\\">window</span> = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-window&apos;</span>)\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">everyTen</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">var</span> i = <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-comment\\">//window calls init with each data item,</span>\\n  <span class=\\"hljs-comment\\">//and a callback to close that window.</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">window</span>(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">data, cb</span>) </span>{\\n    <span class=\\"hljs-comment\\">//if you don&apos;t want to start a window here,</span>\\n    <span class=\\"hljs-comment\\">//return undefined</span>\\n    <span class=\\"hljs-keyword\\">if</span>(i != <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">var</span> sum = <span class=\\"hljs-number\\">0</span>\\n\\n    <span class=\\"hljs-comment\\">//else return a function.</span>\\n    <span class=\\"hljs-comment\\">//this will be called all data</span>\\n    <span class=\\"hljs-comment\\">//until you callback.</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end, data</span>) </span>{\\n      <span class=\\"hljs-keyword\\">if</span>(end) <span class=\\"hljs-keyword\\">return</span> cb(<span class=\\"hljs-literal\\">null</span>, sum)\\n      sum += data\\n      <span class=\\"hljs-keyword\\">if</span>(++i &gt;= <span class=\\"hljs-number\\">10</span>) {\\n        i = <span class=\\"hljs-number\\">0</span>\\n        cb(<span class=\\"hljs-literal\\">null</span>, sum)\\n      }\\n    }\\n  }\\n}\\n\\npull(\\n  pull.count(<span class=\\"hljs-number\\">1000</span>),\\n  everyTen(),\\n  pull.log()\\n)</code></pre>\\n<h2>Example: variable sized window</h2>\\n<p>Each window doesn&apos;t have to be the same size...</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull   = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> <span class=\\"hljs-built_in\\">window</span> = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-window&apos;</span>)\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">groupTo100</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">var</span> sum = <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">window</span>(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">_, cb</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(sum != <span class=\\"hljs-literal\\">null</span>) <span class=\\"hljs-keyword\\">return</span>\\n\\n    <span class=\\"hljs-comment\\">//sum stuff together until you have 100 or more</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end, data</span>) </span>{\\n      <span class=\\"hljs-keyword\\">if</span>(end) <span class=\\"hljs-keyword\\">return</span> cb(<span class=\\"hljs-literal\\">null</span>, sum)\\n      sum += data\\n      <span class=\\"hljs-keyword\\">if</span>(sum &gt;= <span class=\\"hljs-number\\">100</span>) {\\n        <span class=\\"hljs-comment\\">//copy sum like this, incase the next item</span>\\n        <span class=\\"hljs-comment\\">//comes through sync</span>\\n        <span class=\\"hljs-keyword\\">var</span> _sum = sum; sum = <span class=\\"hljs-literal\\">null</span>\\n        cb(<span class=\\"hljs-literal\\">null</span>, _sum)\\n      }\\n    }\\n  })\\n}\\n\\npull(\\n  pull.count(<span class=\\"hljs-number\\">1000</span>)\\n  groupTo100(),\\n  pull.log()\\n)</code></pre>\\n<h2>Example: sliding window</h2>\\n<p>to make more over lapping windows\\njust return the window function more often.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull   = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> <span class=\\"hljs-built_in\\">window</span> = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-window&apos;</span>)\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">sliding</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">window</span>(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">_, cb</span>) </span>{\\n    <span class=\\"hljs-keyword\\">var</span> sum = <span class=\\"hljs-number\\">0</span>, i = <span class=\\"hljs-number\\">0</span>\\n\\n    <span class=\\"hljs-comment\\">//sum stuff together until you have 100 or more</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">end, data</span>) </span>{\\n      <span class=\\"hljs-keyword\\">if</span>(end) <span class=\\"hljs-keyword\\">return</span> cb(<span class=\\"hljs-literal\\">null</span>, sum)\\n      sum += data\\n      <span class=\\"hljs-keyword\\">if</span>(++i &gt;= <span class=\\"hljs-number\\">10</span>) {\\n        <span class=\\"hljs-comment\\">//in this example, each window gets it&apos;s own sum,</span>\\n        <span class=\\"hljs-comment\\">//so we don&apos;t need to copy it.</span>\\n        cb(<span class=\\"hljs-literal\\">null</span>, sum)\\n      }\\n    }\\n  })\\n}\\n\\npull(\\n  pull.count(<span class=\\"hljs-number\\">100</span>)\\n  sliding(),\\n  pull.log()\\n)</code></pre>\\n<h2>API</h2>\\n<h3>window (start, map)</h3>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-built_in\\">window</span>(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">startWindow</span> (<span class=\\"hljs-params\\">data, cb</span>) </span>{\\n\\n  <span class=\\"hljs-comment\\">//called on each chunk</span>\\n  <span class=\\"hljs-comment\\">//including the first one</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">addToWindow</span> (<span class=\\"hljs-params\\">end, data</span>) </span>{\\n    <span class=\\"hljs-comment\\">//cb(null, aggregate) when done.</span>\\n  }\\n}, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">mapWindow</span> (<span class=\\"hljs-params\\">start, data</span>) </span>{\\n  <span class=\\"hljs-comment\\">//(optional)</span>\\n  <span class=\\"hljs-comment\\">//map the window to something that tracks start, also</span>\\n})</code></pre>\\n<p>By default, windows are mapped to <code>{start: firstData, data: aggregate}</code>.\\nunless you pass in an different <code>mapWindow</code> function.</p>\\n<h3>window.sliding(reduce, size)</h3>\\n<p>reduce every <code>size</code> items into a single value, in a sliding window</p>\\n<h3>window.recent(size, time)</h3>\\n<p>tumbling window that groups items onto an array,\\neither every <code>size</code> items, or within <code>time</code> ms,\\nwhich ever occurs earliest.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,1],"version":"2.1.4","npmName":"pull-window","category":"combinators"},{"user":"pull-stream","name":"pull-next","path":"pull-stream/pull-next","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-next\\">pull-next</a><div class=\\"contrib\\"></div></h1>\\n<p>read from one pull-stream, then the next, then the next...</p>\\n<p>when one stream end (unless it errored) call a function\\nto get the next stream. much like <a href=\\"https://github.com/pull-stream/pull-cat\\">pull-cat</a>\\nexcept creates streams by calling a function instead of takeing them out of an array.</p>\\n<p>in particular, this is useful for making a read stream that reconnects\\nto a source.</p>\\n<h2>example</h2>\\n<p>create a stream that reads from a leveldb 100 items at a time.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> next = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-next&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pl = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-level&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> db = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;level&apos;</span>)(path_to_level)\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resume</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">var</span> last = <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">return</span> Next(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> pull(\\n      pl.read(db, {gt: last &amp;&amp; last.key, limit: <span class=\\"hljs-number\\">100</span>}),\\n      pull.through(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">data</span>) </span>{ last = data })\\n    )\\n  })\\n}</code></pre>\\n<p>hint: this might be even more useful over <a href=\\"https://github.com/level/multilevel\\">multilevel</a></p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"0.0.0","npmName":"pull-next","category":"combinators"},{"user":"pull-stream","name":"pull-zip","path":"pull-stream/pull-zip","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-zip\\">pull-zip</a><div class=\\"contrib\\"></div></h1>\\n<p>zip <a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a></p>\\n<p>combine N streams into N length tuples.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> zip  = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-zip&apos;</span>)\\n\\nzip(pull.values([<span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span>]), pull.values([<span class=\\"hljs-string\\">&apos;A&apos;</span>, <span class=\\"hljs-string\\">&apos;B&apos;</span>, <span class=\\"hljs-string\\">&apos;C&apos;</span>]))\\n.pipe(pull.log())</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"2.0.0","npmName":"pull-zip","category":"combinators"},{"user":"pull-stream","name":"pull-sort","path":"pull-stream/pull-sort","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-sort\\">pull-sort</a><div class=\\"contrib\\"></div></h1>\\n<p>sort a pull-stream, necessarily, this buffers the stream and then streams\\nthe sorted stream.</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Sort = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-sort&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream/pull&apos;</span>)\\n\\npull(\\n  source,\\n  Sort(compare),\\n  sink\\n)</code></pre>\\n<p><code>Sort</code> takes an optional comparitor, the same signature as <code>Array#sort</code></p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.0","npmName":"pull-sort","category":"combinators"},{"user":"pull-stream","name":"pull-sorted-merge","path":"pull-stream/pull-sorted-merge","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-sorted-merge\\">pull-sorted-merge</a><div class=\\"contrib\\"></div></h1>\\n<p>merge a series of pull-streams into one pull-stream.</p>\\n<p><a href=\\"http://travis-ci.org/dominictarr/pull-stream-merge\\"></a></p>\\n<p><a href=\\"https://ci.testling.com/dominictarr/pull-stream-merge\\"></a></p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> merge = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream-merge&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull  = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\nmerge([stream1, stream2, stream3], sort)\\n  .pipe(pull.log())</code></pre>\\n<p><code>Merge</code> assumes that the each pull streams are in order.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.5","npmName":"pull-sorted-merge","category":"combinators"},{"user":"pull-stream","name":"pull-tee","path":"pull-stream/pull-tee","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-tee\\">pull-tee</a><div class=\\"contrib\\"></div></h1>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"2.0.1","npmName":"pull-tee","category":"combinators"},{"user":"pull-stream","name":"pull-high-watermark","path":"pull-stream/pull-high-watermark","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-high-watermark\\">pull-high-watermark</a><div class=\\"contrib\\"></div></h1>\\n<p>a pull stream that eagerly reads ahead until it has reached the watermark.</p>\\n<h2>example</h2>\\n<p>if there is medium/heavy sync processing in the pipe line (say, parsing),\\nit may go faster if we ensure there is always something coming in the async part,</p>\\n<p>We never want the io to be waiting for the parsing.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> HighWatermark = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-high-watermark&apos;</span>)\\n\\npull(\\n  asyncSource,\\n  HighWatermark(<span class=\\"hljs-number\\">10</span>), <span class=\\"hljs-comment\\">//go faster!</span>\\n  heavySyncProcessing(),\\n  sink\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"0.0.2","npmName":"pull-high-watermark","category":"combinators"},{"user":"pull-stream","name":"pull-abortable","path":"pull-stream/pull-abortable","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-abortable\\">pull-abortable</a><div class=\\"contrib\\"></div></h1>\\n<p>a pull-stream that may be aborted from the outside.</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> Abortable = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-abortable&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> abortable = Abortable()\\npull(\\n  source,\\n  abortable,\\n  sink\\n)\\n<span class=\\"hljs-comment\\">//at any time you can abort the pipeline,</span>\\n<span class=\\"hljs-comment\\">//the source will be cleaned up, and any</span>\\n<span class=\\"hljs-comment\\">//error will be passed to the sink next time it reads.</span>\\natAnyTime(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n  abortable.abort()\\n})</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,20],"version":"4.1.0","npmName":"pull-abortable","category":"combinators"},{"user":"pull-stream","name":"pull-peek","path":"pull-stream/pull-peek","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-peek\\">pull-peek</a><div class=\\"contrib\\"></div></h1>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"0.0.0","npmName":"pull-peek","category":"combinators"},{"user":"pull-stream","name":"pull-cache","path":"pull-stream/pull-cache","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-cache\\">pull-cache</a><div class=\\"contrib\\"></div></h1>\\n<p>Cache a pull-stream source so that you can read it multiple times and the\\nunderlying source only gets read once. Backpressure is respected, so if none of\\nthe resulting cached sources are read, the underlying source is not read.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> cache = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-cache&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> sourceCache = pull(expensiveSource, cache)\\npull(sourceCache(), ...)\\npull(sourceCache(), ...)\\npull(sourceCache(), ...)</code></pre>\\n<h2>API</h2>\\n<h4><code>cache(source): sourceCache</code></h4>\\n<p>Transform a readable stream <code>source</code> into a <code>sourceCache</code> function</p>\\n<h4><code>sourceCache(): cachedSource</code></h4>\\n<p>Return a new readable stream <code>cachedSource</code> that streams the same data as would\\nbe read from <code>source</code></p>\\n<h4><code>sourceCache(end, cb)</code></h4>\\n<p>Abort the underlying source and end its cached sources</p>\\n<h2>License</h2>\\n<p>Copyright (c) 2016 Charles Lehner</p>\\n<p>Usage of the works is permitted provided that this instrument is\\nretained with the works, so that any entity that uses the works is\\nnotified of this instrument.</p>\\n<p>DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.</p>\\n","contributors":[19],"version":"0.0.0","npmName":"pull-cache","category":"combinators"},{"user":"regular","name":"pull-generate","path":"regular/pull-generate","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/regular/pull-generate\\">pull-generate</a><div class=\\"contrib\\"></div></h1>\\n<p>A <a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a> source that produces data on state transitions</p>\\n<h2>Simple Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> generate = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-generate&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\npull(\\n    generate(<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">state, cb</span>) </span>{\\n        cb(state&gt;<span class=\\"hljs-number\\">3</span> ? <span class=\\"hljs-literal\\">true</span> : <span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-number\\">1</span>&lt;&lt;state, state + <span class=\\"hljs-number\\">1</span>)\\n    }),\\n    pull.log()\\n)\\n\\n<span class=\\"hljs-comment\\">// ==&gt; 1 2 4 8</span></code></pre>\\n<h2>Usage</h2>\\n<h3><code>generate(initialState, expand [, onAbort])</code></h3>\\n<ul>\\n<li>\\n<p><code>expand</code>: function that is called with <code>initialstate</code> and a callback.</p>\\n<ul>\\n<li>\\n<p>the callback has the following signature: <code>callback(err, data, newState)</code></p>\\n<ul>\\n<li>\\n<p><code>err</code></p>\\n<ul>\\n<li><code>null</code> to pass <code>data</code> downstream (normal operation)</li>\\n<li><code>true</code> indicates the end of the stream</li>\\n<li>everything else is treated as an error</li>\\n</ul>\\n</li>\\n<li><code>data</code> is send downstream (only if err === null)</li>\\n<li><code>newState</code> is used as <code>state</code> in the next call to <code>expand</code>.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>onAbort: optional function that is called after the stream ended</p>\\n<ul>\\n<li>is called with <code>null</code> or an error object</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[1],"version":"2.2.0","npmName":"pull-generate","category":"combinators"},{"user":"pull-stream","name":"pull-pushable","path":"pull-stream/pull-pushable","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-pushable\\">pull-pushable</a><div class=\\"contrib\\"></div></h1>\\n<p>A pull-stream with a pushable interface.</p>\\n<p>Use this when you really can&apos;t pull from your source.\\nFor example, often I like to have a &quot;live&quot; stream.\\nThis would read a series of data, first old data,\\nbut then stay open and read new data as it comes in.</p>\\n<p>In that case, the new data needs to be queued up while the old data is read,\\nand also, the rate things are pushed into the queue doesn&apos;t affect the rate of reads.</p>\\n<p>If there is no realtime aspect to this stream, it&apos;s likely that you don&apos;t need pushable.\\nInstead try just using <code>pull.values(array)</code>.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Pushable = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-pushable&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull     = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> p = Pushable()\\n\\npull(p, pull.drain(<span class=\\"hljs-built_in\\">console</span>.log))\\n\\np.push(<span class=\\"hljs-number\\">1</span>)\\np.end()</code></pre>\\n<p>Also, can provide a listener for when the stream is closed.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Pushable = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-pushable&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull     = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> p = Pushable(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err</span>) </span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;stream closed!&apos;</span>)\\n})\\n\\n<span class=\\"hljs-comment\\">//read 3 times then abort.</span>\\npull(p, pull.take(<span class=\\"hljs-number\\">3</span>), pull.drain(<span class=\\"hljs-built_in\\">console</span>.log))\\n\\np.push(<span class=\\"hljs-number\\">1</span>)\\np.push(<span class=\\"hljs-number\\">2</span>)\\np.push(<span class=\\"hljs-number\\">3</span>)\\np.push(<span class=\\"hljs-number\\">4</span>) <span class=\\"hljs-comment\\">//stream will be aborted before this is output</span></code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,4,1],"version":"2.0.1","npmName":"pull-pushable","category":"real-time"},{"user":"pull-stream","name":"pull-notify","path":"pull-stream/pull-notify","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-notify\\">pull-notify</a><div class=\\"contrib\\"></div></h1>\\n<p>Notify many listeners via pull-streams.</p>\\n<p>you could use when you might otherwise use an event emitter.\\nWhy not just use an event emitter? EventEmitters have a weird\\nsecurity contract: anyone who can listen can also emit,\\nand they can emit or listen to any events!</p>\\n<p>Instead, events should travel down a single channel,\\nand the ability to emit an event should be separated from\\nthe ability to listen.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Notify = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-notify&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> notify = Notify()\\n\\n<span class=\\"hljs-comment\\">//create a pull stream that listens on events.</span>\\n<span class=\\"hljs-comment\\">//it will eventually get all events.</span>\\npull(notify.listen(), pull.drain((evt) =&gt; <span class=\\"hljs-built_in\\">console</span>.log(evt)))\\n\\nnotify(<span class=\\"hljs-string\\">&apos;hello&apos;</span>) <span class=\\"hljs-comment\\">//emit an event.</span>\\n\\nnotify.end() <span class=\\"hljs-comment\\">//tell all listeners it&apos;s over.</span></code></pre>\\n<p>listers can abort (using the normal pull-stream abort),\\nand that will remove them from the list.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,4,21],"version":"0.1.1","npmName":"pull-notify","category":"real-time"},{"user":"pull-stream","name":"pull-live","path":"pull-stream/pull-live","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-live\\">pull-live</a><div class=\\"contrib\\"></div></h1>\\n<p>construct a pull-stream for reading from a writable source,\\ncan read old records, new (live) records, or both.</p>\\n<p>to be used by <a href=\\"https://github.com/pull-stream/pull-level\\">pull-level</a>,\\n<a href=\\"https://github.com/dominictarr/multiblob\\">multiblobs</a>, and\\n<a href=\\"https://github.com/ssbc/secure-scuttlebutt\\">secure-scuttlebutt</a>.\\n<code>pull-live</code> is generic, and easy to adapt to a new case.</p>\\n<h2>api: createLive(createSource(opts), createLive(opts)) =&gt; createLiveStream(opts)</h2>\\n<p>createLive takes two functions, <code>createSource</code> (which returns a source\\nstream of the stored data) and <code>createLive</code> which returns a stream\\nof the live data. A function that takes <code>opts</code> and is returned.</p>\\n<p>if <code>opts.live</code> is set to true, the stream will only read the old data\\n(from <code>createSource</code>) and then the new data (from <code>createLive</code>) with\\none item <code>{sync: true}</code> to mark when the old data has finished.</p>\\n<p>If <code>opts.sync === false</code> then the sync item will dropped.</p>\\n<p>if <code>opts.live</code> is  true (default: <code>false</code>) the live data is included.\\nif <code>opts.old</code> is false (default: <code>true</code>) the output will not include\\nthe old data. If <code>live</code> and <code>old</code> are both false, an error is thrown.</p>\\n<p>the only valid options are <code>{live: true, old: false}</code> <code>{live: false, old: true}</code>\\nand <code>{live: true, old: true}</code></p>\\n<p>I recomment using <a href=\\"https://github.com/pull-stream/pull-notify\\">pull-notify</a>\\nto implement <code>createLive</code>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> MyLiveStream = createLive(createSource, createLive)\\n\\npull(MyLiveStrea({live:..., old:...}),...)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.1","npmName":"pull-live","category":"real-time"},{"user":"pull-stream","name":"pull-glob","path":"pull-stream/pull-glob","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-glob\\">pull-glob</a><div class=\\"contrib\\"></div></h1>\\n<p>streaming extended glob.</p>\\n<p>use with <a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a></p>\\n<h2>examples</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> glob = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-glob&apos;</span>)\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">glob_log</span> (<span class=\\"hljs-params\\">name, pattern</span>) </span>{\\n  pull(glob(pattern), pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, ary</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;name:&apos;</span>, name, <span class=\\"hljs-string\\">&apos;pattern:&apos;</span>, pattern)\\n    <span class=\\"hljs-built_in\\">console</span>.log(ary)\\n  })\\n}\\n\\n\\nglob_log(<span class=\\"hljs-string\\">&apos;current dir&apos;</span>, <span class=\\"hljs-string\\">&apos;.&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;js in current dir&apos;</span>, <span class=\\"hljs-string\\">&apos;*.js&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;everything under current dir&apos;</span>, <span class=\\"hljs-string\\">&apos;**&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;all js under current dir&apos;</span>, <span class=\\"hljs-string\\">&apos;**/*.js&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;parent directories&apos;</span>, <span class=\\"hljs-string\\">&apos;...&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;hidden files&apos;</span>, <span class=\\"hljs-string\\">&apos;.../.*&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;available modules&apos;</span>, <span class=\\"hljs-string\\">&apos;.../node_modules/*&apos;</span>)\\nglob_log(<span class=\\"hljs-string\\">&apos;local package files&apos;</span>, <span class=\\"hljs-string\\">&apos;.../{package,component}.json&apos;</span>)</code></pre>\\n<h2>stopping early</h2>\\n<p>because this module uses pull-streams, it&apos;s lazy,\\nso you can do queries like the following:</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//find the first package.json in a parent directory.</span>\\npull(glob(<span class=\\"hljs-string\\">&apos;.../package.json&apos;</span>), pull.take(<span class=\\"hljs-number\\">1</span>), log())</code></pre>\\n<p>And you will retrive only the first item, and <em>will\\nnot do any extra IO</em>. This is hugely useful when\\ndoing a large traversal...</p>\\n<h2>collect node_module tree</h2>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  glob(<span class=\\"hljs-string\\">&apos;**/node_modules/*/package.json&apos;</span>),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">e, arr</span>) </span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(arr)\\n  })\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.6","npmName":"pull-glob","category":"file system and databases"},{"user":"pull-stream","name":"pull-level","path":"pull-stream/pull-level","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-level\\">pull-level</a><div class=\\"contrib\\"></div></h1>\\n<p><a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a> interface to\\n<a href=\\"https://github.com/rvagg/node-levelup\\">levelup</a></p>\\n<h2>Example - reading</h2>\\n<p>read items in database.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pl = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-level&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> db = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;levelup&apos;</span>)(<span class=\\"hljs-string\\">&apos;/tmp/pull-level-example&apos;</span>)\\n\\npull(pl.read(db), pull.collect(<span class=\\"hljs-built_in\\">console</span>.log))</code></pre>\\n<p>read items in database, plus realtime changes</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pl.read(db, {live: <span class=\\"hljs-literal\\">true</span>}),\\n  <span class=\\"hljs-comment\\">//log data as it comes,</span>\\n  <span class=\\"hljs-comment\\">//because tail will keep the connection open</span>\\n  <span class=\\"hljs-comment\\">//so we&apos;ll never see the end otherwise.</span>\\n  pull.through(<span class=\\"hljs-built_in\\">console</span>.log),\\n  <span class=\\"hljs-comment\\">//note, pull-streams will not drain unless something is</span>\\n  <span class=\\"hljs-comment\\">//pulling the data through, so we have to add drain</span>\\n  <span class=\\"hljs-comment\\">//even though the data we want is coming from pull.through()</span>\\n  pull.drain()\\n)</code></pre>\\n<p>If you just want the realtime inserts,\\nuse <code>live</code></p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pl.live(db, {live: <span class=\\"hljs-literal\\">true</span>}),\\n  pull.through(<span class=\\"hljs-built_in\\">console</span>.log),\\n  pull.drain()\\n)</code></pre>\\n<h2>Example - writing</h2>\\n<p>To write, pipe batch changes into <code>write</code></p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.values([\\n    {key: <span class=\\"hljs-number\\">0</span>, value: <span class=\\"hljs-string\\">&apos;zero&apos;</span>, type: <span class=\\"hljs-string\\">&apos;put&apos;</span>},\\n    {key: <span class=\\"hljs-number\\">1</span>, value: <span class=\\"hljs-string\\">&apos;one&apos;</span>,  type: <span class=\\"hljs-string\\">&apos;put&apos;</span>},\\n    {key: <span class=\\"hljs-number\\">2</span>, value: <span class=\\"hljs-string\\">&apos;two&apos;</span>,  type: <span class=\\"hljs-string\\">&apos;put&apos;</span>},\\n  ]),\\n  pl.write(db)\\n)</code></pre>\\n<p>If you are lazy/busy, you can leave off <code>type</code>.\\nIn that case, if <code>value</code> is non-null, the change\\nis considered a <code>put</code> else, a <code>del</code>.</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.values([\\n    {key: <span class=\\"hljs-number\\">0</span>, value: <span class=\\"hljs-string\\">&apos;zero&apos;</span>},\\n    {key: <span class=\\"hljs-number\\">1</span>, value: <span class=\\"hljs-string\\">&apos;one&apos;</span>},\\n    {key: <span class=\\"hljs-number\\">2</span>, value: <span class=\\"hljs-string\\">&apos;two&apos;</span>},\\n  ]), \\n  pl.write(db)\\n)</code></pre>\\n<h2>Example - indexes!</h2>\\n<p>With pull-level it&apos;s easy to create indexes.\\njust save a pointer to the key.</p>\\n<p>like this:</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.values([\\n    {key: key, value: VALUE, type: <span class=\\"hljs-string\\">&apos;put&apos;</span>},\\n    {key: <span class=\\"hljs-string\\">&apos;~INDEX~&apos;</span> + VALUE.prop, value: key,  type: <span class=\\"hljs-string\\">&apos;put&apos;</span>},\\n  ]),\\n  pl.write(db)\\n)</code></pre>\\n<p>then, when you want to do a <code>read</code>, use <code>asyncMap</code></p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pl.read(db, {min: <span class=\\"hljs-string\\">&apos;~INDEX~&apos;</span>, max: <span class=\\"hljs-string\\">&apos;~INDEX~~&apos;</span>})\\n  pull.asyncMap(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">e, cb</span>) </span>{\\n    db.get(e.value, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">value</span>) </span>{\\n      cb(<span class=\\"hljs-literal\\">null</span>, {key: e.value, value: value})\\n    })\\n  }),\\n  pull.collect(<span class=\\"hljs-built_in\\">console</span>.log)\\n)</code></pre>\\n<h2>Example realtime aggregation</h2>\\n<p>We want to keep a realtime count of everything in the database.\\nWhen ever something is inserted, we increment. But, we need\\nto check the records that are <em>currently</em> in the database.</p>\\n<p>Since it takes some time to scan the database, we need to make sure\\nwe have done that before giving an answer. We can read it all with\\none stream, using <code>{sync: true}</code> to be notified of when we have read out all the old records.</p>\\n<p>First all the old records are read from the non-live stream,\\nthen you get one <code>{sync: true}</code> element, then all the new item.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> sum = <span class=\\"hljs-number\\">0</span>, ready = <span class=\\"hljs-literal\\">false</span>, waiting = []\\n\\n<span class=\\"hljs-comment\\">//call get count to know s</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getSum</span> (<span class=\\"hljs-params\\">cb</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!ready) waiting.push(cb)\\n  <span class=\\"hljs-keyword\\">else</span> cb(<span class=\\"hljs-literal\\">null</span>, sum)\\n}\\n\\npull(\\n  pl.read(db, {sync: <span class=\\"hljs-literal\\">true</span>}),\\n  pull.drain(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">op</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(op.sync) {\\n      <span class=\\"hljs-comment\\">//if we see a data element with this it means</span>\\n      ready = <span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">while</span>(waiting.length) waiting.shift()(<span class=\\"hljs-literal\\">null</span>, count)\\n    }\\n    <span class=\\"hljs-comment\\">//increment our counter!</span>\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Number</span>.isFinite(+op.value.amount)) <span class=\\"hljs-comment\\">//filter out non numbers &amp; NaN.</span>\\n      sum += op.value.amount\\n  })\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"2.0.2","npmName":"pull-level","category":"file system and databases"},{"user":"DamonOehlman","name":"pull-file","path":"DamonOehlman/pull-file","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/DamonOehlman/pull-file\\">pull-file</a><div class=\\"contrib\\"></div></h1>\\n<p>This is a simple module which uses raw file reading methods available in\\nthe node <code>fs</code> module to read files on-demand.  It&apos;s a work in progress\\nand feedback is welcome :)</p>\\n<p><a href=\\"https://nodei.co/npm/pull-file/\\"></a></p>\\n<p><a href=\\"https://travis-ci.org/DamonOehlman/pull-file\\"></a> <a href=\\"https://github.com/badges/stability-badges\\"></a> <a href=\\"https://david-dm.org/DamonOehlman/pull-file\\"></a></p>\\n<h2>Example Usage</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> file = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-file&apos;</span>);\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>);\\n<span class=\\"hljs-keyword\\">var</span> path = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;path&apos;</span>);\\n<span class=\\"hljs-keyword\\">var</span> inputFile = path.resolve(__dirname, <span class=\\"hljs-string\\">&apos;../test/assets/ipsum.txt&apos;</span>);\\n\\npull(\\n  file(inputFile, { bufferSize: <span class=\\"hljs-number\\">40</span> }),\\n  pull.take(<span class=\\"hljs-number\\">4</span>),\\n  pull.drain(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">buffer</span>) </span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(buffer.toString());\\n  })\\n);</code></pre>\\n<h2>License(s)</h2>\\n<h3>MIT</h3>\\n<p>Copyright (c) 2014 Damon Oehlman <a href=\\"http://github.com/DamonOehlman/pull-file/blob/master/mailto:damon.oehlman@gmail.com\\">damon.oehlman@gmail.com</a></p>\\n<p>Permission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n&apos;Software&apos;), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:</p>\\n<p>The above copyright notice and this permission notice shall be\\nincluded in all copies or substantial portions of the Software.</p>\\n<p>THE SOFTWARE IS PROVIDED &apos;AS IS&apos;, WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\\n","contributors":[22,0],"version":"0.5.0","npmName":"pull-file","category":"file system and databases"},{"user":"dominictarr","name":"pull-write","path":"dominictarr/pull-write","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-write\\">pull-write</a><div class=\\"contrib\\"></div></h1>\\n<p>base class for creating generic pull-sinks\\nthat write to some device via an async call.</p>\\n<h2>Write(asyncWrite, reduce, max, cb)</h2>\\n<h3>asyncWrite(ary, cb)</h3>\\n<p>async function called with an array of items to output.\\nThis function will only ever be called once at a time (per instance),\\nand while it is working <code>pull-write</code> will buffer any subsequent writes,\\nuntil the buffer has the length of at most <code>max</code>,\\nor <code>asyncWrite</code> has called back.</p>\\n<h3>reduce (queue, item)</h3>\\n<p><code>queue</code> is the current backlog of data the <code>pull-write</code> is getting ready to write.\\n<code>item</code> is the next incoming item. <code>reduce</code> must add <code>item</code> into <code>queue</code>\\nin whatever way is appropiate. If <code>queue</code> is empty, then it will be <code>null</code>.\\nYour <code>reduce</code> function must handle that case and set an initial value.</p>\\n<p>by default, <code>reduce</code> will be a function that initializes a buffer,\\nand then pushes the new items onto that buffer, this means <code>max</code> will be\\ncompared to the number of items in that buffer.</p>\\n<h3>max</h3>\\n<p>A number, when the <code>.length</code> property of the <code>queue</code> returned by <code>reduce</code>\\ngets this big <code>pull-write</code> will stop reading more, until asyncWrite\\ncalls back.</p>\\n<h2>example</h2>\\n<p>Suppose we want a to take a stream of values from one leveldb,\\nand write it to another. If we have the timestamp they where written\\nto the first, we can track that in the second, then it&apos;s easy to keep\\nthem both up to date. We just need to always output latest ts separately.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Write = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-write&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> LevelWrite = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">db, cb</span>) </span>{\\n  <span class=\\"hljs-keyword\\">var</span> max = <span class=\\"hljs-number\\">100</span>\\n  <span class=\\"hljs-keyword\\">return</span> Write(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">ary, cb</span>) </span>{\\n    db.batch(ary, cb)\\n  }, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">queue, data</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!queue)\\n      queue = [{key: <span class=\\"hljs-string\\">&apos;~meta~ts&apos;</span>, value: <span class=\\"hljs-number\\">0</span>, type: <span class=\\"hljs-string\\">&apos;put&apos;</span>}]\\n    queue.push({key:data.key, value: data.value, type: <span class=\\"hljs-string\\">&apos;put&apos;</span>})\\n    <span class=\\"hljs-comment\\">//the record of the current sequence is always the first value</span>\\n    <span class=\\"hljs-comment\\">//in the batch, so we can update it easily.</span>\\n    queue[<span class=\\"hljs-number\\">0</span>].value = data.ts\\n    <span class=\\"hljs-keyword\\">return</span> queue\\n  }, max, cb)\\n}</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.2","npmName":"pull-write","category":"file system and databases"},{"user":"dominictarr","name":"pull-write-file","path":"dominictarr/pull-write-file","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-write-file\\">pull-write-file</a><div class=\\"contrib\\"></div></h1>\\n<p>pull-stream version of fs.createWriteStream</p>\\n<p>currently really simple and does not yet support all fs.createWriteStream options yet.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Write = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-write-stream&apos;</span>)\\n\\npull(\\n  source, <span class=\\"hljs-comment\\">//must be buffers or strings!</span>\\n  Write(pathToFile, {}, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err</span>) </span>{\\n    <span class=\\"hljs-comment\\">//callback is called once write is complete,</span>\\n    <span class=\\"hljs-comment\\">//and file descriptor is closed</span>\\n  })\\n)</code></pre>\\n<h2>Performance</h2>\\n<p>For large buffers this is currently as fast as node&apos;s streams,\\nbut for lots of small buffers it&apos;s a little less.\\nNode uses the fs binding&apos;s <code>writev</code> to pass many buffers to the kernel simutaniously.</p>\\n<p>TODO: benchmarks with graphs comparing node streams and pull streams.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"0.2.1","npmName":"pull-write-file","category":"file system and databases"},{"user":"pull-stream","name":"pull-watch","path":"pull-stream/pull-watch","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-watch\\">pull-watch</a><div class=\\"contrib\\"></div></h1>\\n<p>fs.watch with pull streams using <a href=\\"https://github.com/paulmillr/chokidar\\"><code>chokidar</code></a></p>\\n<pre><code class=\\"hljs language-shell\\">npm install --save pull-watch</code></pre>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> watch = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-watch&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> watcher = watch(<span class=\\"hljs-string\\">&apos;./&apos;</span>)\\n\\npull(\\n  watcher.listen(),\\n  pull.drain(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">event</span>) </span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;event&apos;</span>, event)\\n  }, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err</span>) </span>{\\n    watcher.end()\\n  })\\n)</code></pre>\\n<h2>usage</h2>\\n<h3><code>watch = require(&apos;pull-watch&apos;)</code></h3>\\n<h3><code>watcher = watch(paths,[ options,] onReady)</code></h3>\\n<p>where <code>paths</code> is a files, dirs to be watched recursively, or glob patterns.</p>\\n<p>optional options are for <a href=\\"https://github.com/paulmillr/chokidar#api\\"><code>chokidar</code></a>.</p>\\n<p>watch returns a <a href=\\"https://github.com/pull-stream/pull-notify\\"><code>pull-notify</code></a> stream with properties:</p>\\n<ul>\\n<li><code>listen()</code>: function to create a pull source stream of the file watcher events</li>\\n<li><code>abort(err)</code>: function to end the file watcher and signal an error to all respective streams</li>\\n<li><code>end()</code>: function to end the file watcher and signal completion to all respective streams</li>\\n<li><code>add(path)</code>: function to add file path to file watcher</li>\\n</ul>\\n<p><code>onReady(watcher)</code> is called on &quot;ready&quot; event.</p>\\n<h2>license</h2>\\n<p>The Apache License</p>\\n<p>Copyright &#xA9; 2016 Michael Williams</p>\\n<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at</p>\\n<pre><code>http://www.apache.org/licenses/LICENSE-2.0\\n</code></pre>\\n<p>Unless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.</p>\\n","contributors":[4],"version":"1.1.1","npmName":"pull-watch","category":"file system and databases"},{"user":"pull-stream","name":"pull-split","path":"pull-stream/pull-split","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-split\\">pull-split</a><div class=\\"contrib\\"></div></h1>\\n<p><a href=\\"https://github.com/dominictarr/split\\">split</a> ported to\\n<a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a> style.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> split = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-split&apos;</span>)\\n\\npull(\\n  textStream\\n  split(),\\n  output\\n)</code></pre>\\n<p>if the textStream is buffers, and contain UTF8\\n(it probably will if you have german or chinese friends, etc)\\nthen you MUST use this with <code>pull-utf8-decoder</code></p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> split = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-split&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> utf8 = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-utf8-decoder&apos;</span>)\\n\\npull(\\n  textStream\\n  utf8(),\\n  split(),\\n  output\\n)</code></pre>\\n<h2>split(matcher, mapper, reverse, skipLast)</h2>\\n<h3>matcher - string or regexp.</h3>\\n<p>unit to split by, defaults to <code>\\\\n</code></p>\\n<h3>mapper - function</h3>\\n<p>function to apply to each line matched.</p>\\n<h3>reverse - boolean</h3>\\n<p>if true, emit lines in reverse. use this if the input is a file\\nyou are reading backwards.</p>\\n<h3>skipLast - boolean</h3>\\n<p>use this to skip the last value if it is and empty string <code>&apos;&apos;</code>\\nif this is not set then the behavior is the same as <code>String#split</code></p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,3],"version":"0.2.0","npmName":"pull-split","category":"text"},{"user":"pull-stream","name":"pull-stringify","path":"pull-stream/pull-stringify","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stringify\\">pull-stringify</a><div class=\\"contrib\\"></div></h1>\\n<p>JSON.stringify as pull stream</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> stringify = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stringify&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> toPull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;stream-to-pull-stream&apos;</span>)\\n\\npull(\\n  pull.value([A, B, C]),\\n  stringify(),\\n  toPull(process.stdout)\\n)</code></pre>\\n<p><code>pull-stringify</code> takes the same arguments as\\n<a href=\\"https://github.com/dominictarr/JSONStream#jsonstreamstringifyopen-sep-close\\">JSONStream.stringify</a> but as a pull stream.</p>\\n<p>Also if you want line separated json, a default is provided:</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.value([A, B, C]),\\n  stringify.lines(),\\n  toPull(process.stdout)\\n)</code></pre>\\n<p>to use a non-custom stringifyer use the final argument.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-comment\\">//compatible with JSON but supports buffers.</span>\\n<span class=\\"hljs-keyword\\">var</span> JSONB = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;json-buffer&apos;</span>)\\n\\n<span class=\\"hljs-comment\\">//use defaults for op, cl, and sep</span>\\nstringify(<span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-literal\\">null</span>, JSONB.stringify)\\n\\n<span class=\\"hljs-comment\\">//or</span>\\nstringify.lines(JSONB.stringify)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.2.2","npmName":"pull-stringify","category":"text"},{"user":"dominictarr","name":"pull-json-doubleline","path":"dominictarr/pull-json-doubleline","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-json-doubleline\\">pull-json-doubleline</a><div class=\\"contrib\\"></div></h1>\\n<p>stream json stringify and parser into double newline delimited json.\\ndouble newline delimiting means you can use indented json as the stream format,\\nwhich is more human readable.</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> JSONDL = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-json-doubleline&apos;</span>)\\n\\npull(\\n  source,\\n  JSONDL.stringify(),\\n  JSONDL.parse(),\\n  sink\\n)</code></pre>\\n<h2>api</h2>\\n<h3>JSONDL.stringify() =&gt; through</h3>\\n<p>stringify a stream</p>\\n<h3>JSONDL.parse() =&gt; through</h3>\\n<h3>JSONDL(objet_duplex) =&gt; serialized_duplex</h3>\\n<p>encode/decode around a duplex stream of json buffers,\\nreturn a stream that can be piped to a io steam.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.1.0","npmName":"pull-json-doubleline","category":"text"},{"user":"pull-stream","name":"pull-utf8-decoder","path":"pull-stream/pull-utf8-decoder","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-utf8-decoder\\">pull-decode</a><div class=\\"contrib\\"></div></h1>\\n<p>Take a stream of buffers and output a stream of valid strings,</p>\\n<p>If you have utf8 characters this is absolutely necessary!</p>\\n<p><a href=\\"https://travis-ci.org/dominictarr/pull-utf8-decoder\\">\\n</a></p>\\n<p><a href=\\"http://ci.testling.com/dominictarr/pull-utf8-decoder\\">\\n</a></p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.2","npmName":"pull-utf8-decoder","category":"text"},{"user":"pull-stream","name":"pull-handshake","path":"pull-stream/pull-handshake","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-handshake\\">pull-handshake</a><div class=\\"contrib\\"></div></h1>\\n<p>Create handshakes for binary protocols with pull streams.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> stream = handshake()\\n<span class=\\"hljs-keyword\\">var</span> shake = stream.handshake\\n\\n<span class=\\"hljs-comment\\">// Pull some amount of data out of the stream</span>\\nshake.read(<span class=\\"hljs-number\\">32</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, data</span>) </span>{\\n\\n  <span class=\\"hljs-comment\\">// Write a response...</span>\\n  shake.write(<span class=\\"hljs-keyword\\">new</span> Buffer(<span class=\\"hljs-string\\">&apos;hello there&apos;</span>))\\n\\n  shake.read(<span class=\\"hljs-number\\">32</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, data</span>) </span>{\\n    <span class=\\"hljs-comment\\">// Get a confirmation,</span>\\n    <span class=\\"hljs-comment\\">// and then attach the application</span>\\n    <span class=\\"hljs-keyword\\">var</span> stream = createApplicationStream()\\n\\n    pull(stream, shake.rest(), stream)\\n    <span class=\\"hljs-comment\\">// shake.rest() returns a duplex binary stream.</span>\\n  })\\n})\\n\\n\\n<span class=\\"hljs-comment\\">// shake is itself a duplex pull-stream.</span>\\npull(shake, stream, shake)</code></pre>\\n<h2>API</h2>\\n<h3><code>handshake([opts], [callback])</code></h3>\\n<h4>opts</h4>\\n<p>Type: <code>Object</code><br>\\nDefault: <code>{timeout: 5e3}</code></p>\\n<p>The allowed duration for the handshake to take place.</p>\\n<h4>callback</h4>\\n<p>Type: <code>Function</code><br>\\nDefault: <code>function noop () {}</code></p>\\n<p>This will be called when the handshake completes, or fails. In the case of failure it is called with an <code>error</code>.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,16,13],"version":"1.1.4","npmName":"pull-handshake","category":"binary"},{"user":"dominictarr","name":"pull-randomly-split","path":"dominictarr/pull-randomly-split","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-randomly-split\\">pull-randomly-split</a><div class=\\"contrib\\"></div></h1>\\n<p>randomly split incoming buffers, to test that parsing works correctly.</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.values(crypto.randomBytes(<span class=\\"hljs-number\\">1024</span>*<span class=\\"hljs-number\\">1024</span>)),\\n  randomSplit(<span class=\\"hljs-number\\">1024</span>, <span class=\\"hljs-number\\">2096</span>),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n\\n\\n  })\\n)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.0.4","npmName":"pull-randomly-split","category":"binary"},{"user":"dominictarr","name":"pull-reader","path":"dominictarr/pull-reader","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-reader\\">pull-reader</a><div class=\\"contrib\\"></div></h1>\\n<p>read bytes from a binary pull-stream</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Reader = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-reader&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> File = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-file&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> reader = Reader(<span class=\\"hljs-number\\">1000</span>) <span class=\\"hljs-comment\\">//1 second timeout, abort upstream if read takes longer than this.</span>\\n\\n\\npull(\\n  File(<span class=\\"hljs-string\\">&apos;./package.json&apos;</span>),\\n  reader\\n)\\n\\n<span class=\\"hljs-comment\\">//read the first byte of a file</span>\\nreader.read(<span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, data</span>) </span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(data.toString()) <span class=\\"hljs-comment\\">// =&gt; {</span>\\n})</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.2.8","npmName":"pull-reader","category":"binary"},{"user":"dignifiedquire","name":"pull-length-prefixed","path":"dignifiedquire/pull-length-prefixed","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dignifiedquire/pull-length-prefixed\\">pull-length-prefixed</a><div class=\\"contrib\\"></div></h1>\\n<p><a href=\\"http://ipn.io\\"></a>\\n<a href=\\"http://ipfs.io/\\"></a>\\n<a href=\\"http://webchat.freenode.net/?channels=%2523ipfs\\"></a>\\n<a href=\\"https://coveralls.io/github/dignifiedquire/pull-length-prefixed?branch=master\\"></a>\\n<a href=\\"https://travis-ci.org/dignifiedquire/pull-length-prefixed\\"></a>\\n<a href=\\"https://circleci.com/gh/dignifiedquire/pull-length-prefixed\\"></a>\\n<a href=\\"https://david-dm.org/dignifiedquire/pull-length-prefixed\\"></a> <a href=\\"https://github.com/feross/standard\\"></a>\\n<a href=\\"https://github.com/RichardLitt/standard-readme\\"></a></p>\\n<blockquote>\\n<p>Streaming length prefixed buffers with pull-streams</p>\\n</blockquote>\\n<h2>Table of Contents</h2>\\n<ul>\\n<li><a href=\\"#installation\\">Installation</a></li>\\n<li><a href=\\"#usage\\">Usage</a></li>\\n<li><a href=\\"#contribute\\">Contribute</a></li>\\n<li><a href=\\"#license\\">License</a></li>\\n</ul>\\n<h2>Installation</h2>\\n<pre><code class=\\"hljs language-bash\\">$ npm install --save pull-length-prefixed</code></pre>\\n<h2>Usage</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> lp = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-length-prefixed&apos;</span>)\\n\\n<span class=\\"hljs-comment\\">// encode</span>\\npull(\\n  pull.values([Buffer.from(<span class=\\"hljs-string\\">&apos;hello world&apos;</span>)]),\\n  lp.encode(),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, encode</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (err) <span class=\\"hljs-keyword\\">throw</span> err\\n    <span class=\\"hljs-built_in\\">console</span>.log(encoded)\\n    <span class=\\"hljs-comment\\">// =&gt; [Buffer &lt;0b 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;]</span>\\n  })\\n)\\n\\n<span class=\\"hljs-comment\\">// decode</span>\\npull(\\n  pull.values(encoded), <span class=\\"hljs-comment\\">// e.g. from above</span>\\n  lp.decode(),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, decoded</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (err) <span class=\\"hljs-keyword\\">throw</span> err\\n    <span class=\\"hljs-built_in\\">console</span>.log(decoded)\\n    <span class=\\"hljs-comment\\">// =&gt; [Buffer &lt;68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;]</span>\\n  })\\n)</code></pre>\\n<h2>Contribute</h2>\\n<p>PRs and issues gladly accepted! Check out the <a href=\\"http://github.com/dignifiedquire/pull-length-prefixed/blob/master///github.com/dignifiedquire/pull-length-prefixed/issues\\">issues</a>.</p>\\n<h2>License</h2>\\n<p>MIT &#xA9; 2016 Friedel Ziegelmayer</p>\\n","contributors":[16,23],"version":"1.0.0","npmName":"pull-length-prefixed","category":"binary"},{"user":"dignifiedquire","name":"pull-block","path":"dignifiedquire/pull-block","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dignifiedquire/pull-block\\">pull-block</a><div class=\\"contrib\\"></div></h1>\\n<p><a href=\\"http://travis-ci.org/dignifiedquire/pull-block\\"></a><a href=\\"https://david-dm.org/dignifiedquire/pull-stream\\"></a> <a href=\\"https://github.com/feross/standard\\"></a></p>\\n<blockquote>\\n<p>transform input into equally-sized chunks as output</p>\\n</blockquote>\\n<p><a href=\\"https://pull-stream.github.io/\\">pull-stream</a> version of <a href=\\"https://npmjs.org/package/block-stream\\">block-stream</a>.</p>\\n<h2>Installation</h2>\\n<p>With <a href=\\"https://npmjs.org\\">npm</a> do:</p>\\n<pre><code class=\\"hljs language-bash\\">&gt; npm install pull-block</code></pre>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> block = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-block&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> toPull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;stream-to-pull-stream&apos;</span>)\\n\\npull(\\n  toPull.source(process.stdin),\\n  block({ size: <span class=\\"hljs-number\\">16</span>, zeroPadding: <span class=\\"hljs-literal\\">true</span> }),\\n  pull.through(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">buf</span>) </span>{\\n    <span class=\\"hljs-keyword\\">var</span> str = buf.toString().replace(<span class=\\"hljs-regexp\\">/[\\\\x00-\\\\x1f]/g</span>, chr)\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;buf[&apos;</span> + buf.length + <span class=\\"hljs-string\\">&apos;]=&apos;</span> + str)\\n  }),\\n  pull.drain()\\n)\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">chr</span> (<span class=\\"hljs-params\\">s</span>) </span>{ <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">&apos;\\\\\\\\x&apos;</span> + pad(s.charCodeAt(<span class=\\"hljs-number\\">0</span>).toString(<span class=\\"hljs-number\\">16</span>), <span class=\\"hljs-number\\">2</span>) }\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">pad</span> (<span class=\\"hljs-params\\">s, n</span>) </span>{ <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Array</span>(n - s.length + <span class=\\"hljs-number\\">1</span>).join(<span class=\\"hljs-string\\">&apos;0&apos;</span>) + s }</code></pre>\\n<pre><code>$ echo {c,d,f}{a,e,i,o,u}{t,g,r} | node example/stream.js\\nbuf[16]=cat cag car cet\\nbuf[16]=ceg cer cit cig\\nbuf[16]=cir cot cog cor\\nbuf[16]=cut cug cur dat\\nbuf[16]=dag dar det deg\\nbuf[16]=der dit dig dir\\nbuf[16]=dot dog dor dut\\nbuf[16]=dug dur fat fag\\nbuf[16]=far fet feg fer\\nbuf[16]=fit fig fir fot\\nbuf[16]=fog for fut fug\\nbuf[16]=fur\\\\x0a\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\n</code></pre>\\n<h2>Methods</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> block = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-block&apos;</span>)</code></pre>\\n<h2>var b = block(opts)</h2>\\n<h2>var b = block(size, opts)</h2>\\n<p>Create a new through stream <code>b</code> that outputs chunks of length <code>size</code> or\\n<code>opts.size</code>.</p>\\n<p>When <code>opts.zeroPadding</code> is false, do not zero-pad the last chunk.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[16],"version":"1.0.0","npmName":"pull-block","category":"binary"},{"user":"dominictarr","name":"pull-net","path":"dominictarr/pull-net","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-net\\">pull-net</a><div class=\\"contrib\\"></div></h1>\\n<p>pull-stream directly to node&apos;s libuv bindings.</p>\\n<p>echo server works, don&apos;t handle all the edge cases yet,\\nor nice error messages etc.</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> createServer = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-net/server&apos;</span>)\\n\\ncreateServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  pull(stream.source, stream.sink) <span class=\\"hljs-comment\\">//ECHO</span>\\n}).listen(<span class=\\"hljs-number\\">9999</span>, <span class=\\"hljs-string\\">&apos;127.0.0.1&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> connect = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-net/client&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> stream = connect(<span class=\\"hljs-number\\">9999</span>, <span class=\\"hljs-string\\">&apos;127.0.0.1&apos;</span>)\\n\\npull(\\n  pull.once(<span class=\\"hljs-keyword\\">new</span> Buffer(<span class=\\"hljs-string\\">&apos;hello tcp&apos;</span>)),\\n  stream,\\n  pull.collect(<span class=\\"hljs-built_in\\">console</span>.log)\\n)</code></pre>\\n<h2>Questions</h2>\\n<p>node does some things that turn out to be unnecessary,\\nlike, take a callback for <code>server.listen</code>.</p>\\n<p>Maybe these cause problem when trying to use other stream types though,\\n(such as like unix pipes, which are also handled in\\n<a href=\\"https://github.com/nodejs/node/blob/master/lib/net.js\\">node/lib/net.js</a>)</p>\\n<p>This is probably mainly to handle some errors... maybe those errors\\ncould just throw?</p>\\n<p>Also, there are often client type connections which may error\\nbefore receiving data (at least in their context, such as authentication errors)\\noften, this can&apos;t be a sync error. So that would suggest an api\\nthat was <code>connect(function (err, stream) {...})</code></p>\\n<p>what if a server was a stream of clients? does that really help?</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,16],"version":"1.0.0","npmName":"pull-net","category":"networks"},{"user":"DamonOehlman","name":"pull-ws","path":"DamonOehlman/pull-ws","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/DamonOehlman/pull-ws\\">pull-ws</a><div class=\\"contrib\\"></div></h1>\\n<p>Use websockets via pull-stream interface. both client and server.</p>\\n<p><a href=\\"https://nodei.co/npm/pull-ws/\\"></a></p>\\n<p><a href=\\"https://github.com/dominictarr/stability#unstable\\"></a> <a href=\\"https://travis-ci.org/DamonOehlman/pull-ws\\"></a></p>\\n<h2>example - client</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> connect = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-ws/client&apos;</span>)\\n<span class=\\"hljs-comment\\">// OR: require(&apos;pull-ws&apos;).connect</span>\\n\\nconnect(WS_URL, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, stream</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err <span class=\\"hljs-comment\\">//handle err</span>\\n  pull(source, stream, sink)\\n})</code></pre>\\n<h2>example - server</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> createServer = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-ws/server&apos;</span>)\\ncreateServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  <span class=\\"hljs-comment\\">//pipe the stream somewhere.</span>\\n  <span class=\\"hljs-comment\\">//eg, echo server</span>\\n  pull(stream, stream)\\n}).listen(PORT)</code></pre>\\n<h2>api</h2>\\n<h3><code>connect = require(&apos;pull-ws/client&apos;)</code></h3>\\n<p><code>connect(url, cb | {binary: boolean, onConnect: cb})</code></p>\\n<p>Create a websocket client connection. set binary: true\\nto get a stream of arrayBuffers (on the browser).\\ndefaults to true on node, but to strings on the browser.\\nthis may cause a problems if your application assumes binary.</p>\\n<p>else, just provide the callback.</p>\\n<pre><code class=\\"hljs language-js\\">connect(url, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, stream</span>) </span>{\\n  ...\\n})</code></pre>\\n<h3>`createServer = require(&apos;pull-ws/server&apos;)</h3>\\n<p>create pull stream websocket servers.\\nthe servers take a lot more options than clients.</p>\\n<p><code>createServer(opts?, onConnection)</code></p>\\n<p><code>onConnect(stream)</code> is called every time a connection is received.</p>\\n<p><code>opts</code> takes the same server options as <a href=\\"https://github.com/websockets/ws/blob/master/doc/ws.md#new-wsserveroptions-callback\\">ws module</a></p>\\n<h4>example</h4>\\n<p>one duplex service you may want to use this with is <a href=\\"https://github.com/dominictarr/muxrpc\\">muxrpc</a></p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> ws = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-ws-server&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\nws.createServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  <span class=\\"hljs-comment\\">//pipe duplex style to your service.</span>\\n  pull(stream, service.createStream(), stream)\\n})\\n.listen(<span class=\\"hljs-number\\">9999</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> stream = ws.connect(<span class=\\"hljs-string\\">&apos;ws://localhost:9999&apos;</span>)\\n\\npull(stream, client.createStream(), stream)</code></pre>\\n<p>if the connection fails, the first read from the stream will be an error,\\notherwise, to get a handle of stream end/error pass a callback to connect.</p>\\n<pre><code class=\\"hljs language-js\\">ws.connect(<span class=\\"hljs-string\\">&apos;ws://localhost:9999&apos;</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, stream</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">return</span> handleError(err)\\n  <span class=\\"hljs-comment\\">//stream is now ready</span>\\n})</code></pre>\\n<p>To run the server over TLS:</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> tlsOpts = {\\n  key: fs.readFileSync(<span class=\\"hljs-string\\">&apos;test/fixtures/keys/agent2-key.pem&apos;</span>),\\n  cert: fs.readFileSync(<span class=\\"hljs-string\\">&apos;test/fixtures/keys/agent2-cert.pem&apos;</span>)\\n};\\nws.createServer(tlsOpts, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  <span class=\\"hljs-comment\\">//pipe duplex style to your service.</span>\\n  pull(stream, service.createStream(), stream)\\n})\\n.listen(<span class=\\"hljs-number\\">9999</span>)</code></pre>\\n<p>To add client-authentication to the server, you can set <code>verifyClient</code>.\\n<a href=\\"https://github.com/websockets/ws/blob/master/doc/ws.md#optionsverifyclient\\">Documentation here</a>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">verifyClient</span> (<span class=\\"hljs-params\\">info</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> info.secure == <span class=\\"hljs-literal\\">true</span>\\n}\\nws.createServer({ verifyClient: verifyClient }, onStream)</code></pre>\\n<h2>use with an http server</h2>\\n<p>if you have an http server that you also need to serve stuff\\nover, and want to use a single port, use the <code>server</code> option.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> http = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;http&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> server = http.createServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">req, res</span>)</span>{...}).listen(....)\\nws.createServer({server: server}, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{ ... })</code></pre>\\n<h3>core, websocket wrapping functions</h3>\\n<p>these modules are used internally, to wrap a websocket.\\nyou probably won&apos;t need to touch these,\\nbut they are documented anyway.</p>\\n<h3><code>require(&apos;pull-ws/duplex&apos;)(socket, opts?)</code></h3>\\n<p>turn a websocket into a duplex pull stream.\\nIf provided, <code>opts</code> is passed to <code>pws.sink(socket, opts)</code>.</p>\\n<p>Websockets do not support half open mode.\\n<a href=\\"http://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener\\">see allowHalfOpen option in net module</a></p>\\n<p>If you have a protocol that assumes halfOpen connections, but are using\\na networking protocol like websockets that does not support it, I suggest\\nusing <a href=\\"https://github.com/dominictarr/pull-goodbye\\">pull-goodbye</a> with your\\nprotocol.</p>\\n<p>The duplex stream will also contain a copy of the properties from\\nthe http request that became the websocket. they are <code>method</code>, <code>url</code>,\\n<code>headers</code> and <code>upgrade</code>.</p>\\n<p>also exposed at: <code>var duplex = require(&apos;pull-ws&apos;)</code></p>\\n<h3><code>require(&apos;pull-ws/sink&apos;)(socket, opts?)</code></h3>\\n<p>Create a pull-stream <code>Sink</code> that will write data to the <code>socket</code>.\\n<code>opts</code> may be <code>{closeOnEnd: true, onClose: onClose}</code>.\\n<code>onClose</code> will be called when the sink ends. If <code>closeOnEnd=false</code>\\nthe stream will not close, it will just stop emitting data.\\n(by default <code>closeOnEnd</code> is true)</p>\\n<p>If <code>opts</code> is a function, then <code>onClose = opts; opts.closeOnEnd = true</code>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>);\\n<span class=\\"hljs-keyword\\">var</span> wsSink = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-ws&apos;</span>);\\n\\n<span class=\\"hljs-comment\\">// connect to the echo endpoint for test/server.js</span>\\n<span class=\\"hljs-keyword\\">var</span> socket = <span class=\\"hljs-keyword\\">new</span> WebSocket(<span class=\\"hljs-string\\">&apos;wss://echo.websocket.org&apos;</span>);\\n\\n<span class=\\"hljs-comment\\">// write values to the socket</span>\\npull(\\n  pull.infinite(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">&apos;hello @ &apos;</span> + <span class=\\"hljs-built_in\\">Date</span>.now()\\n  }),\\n  <span class=\\"hljs-comment\\">// throttle so it doesn&apos;t go nuts</span>\\n  pull.asyncMap(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">value, cb</span>) </span>{\\n    setTimeout(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n      cb(<span class=\\"hljs-literal\\">null</span>, value);\\n    }, <span class=\\"hljs-number\\">100</span>);\\n  }),\\n  wsSink(socket)\\n);\\n\\nsocket.addEventListener(<span class=\\"hljs-string\\">&apos;message&apos;</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">evt</span>) </span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;received: &apos;</span> + evt.data);\\n});</code></pre>\\n<p>also exposed at <code>require(&apos;pull-ws&apos;).sink</code></p>\\n<h3><code>require(&apos;pull-ws/source&apos;)(socket)</code></h3>\\n<p>Create a pull-stream <code>Source</code> that will read data from the <code>socket</code>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>);\\n\\n<span class=\\"hljs-comment\\">// we just need the source, so cherrypick</span>\\n<span class=\\"hljs-keyword\\">var</span> wsSource = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-ws/source&apos;</span>);\\n\\npull(\\n  <span class=\\"hljs-comment\\">// connect to the test/server.js endpoint</span>\\n  wsSource(<span class=\\"hljs-keyword\\">new</span> WebSocket(<span class=\\"hljs-string\\">&apos;ws://localhost:3000/read&apos;</span>)),\\n  pull.log()\\n);</code></pre>\\n<p>also exposed at <code>require(&apos;pull-ws&apos;).source</code></p>\\n<h2>LICENSE</h2>\\n<p>MIT</p>\\n","contributors":[0,22,13,4,19],"version":"3.2.3","npmName":"pull-ws","category":"networks"},{"user":"pull-stream","name":"pull-ws-server","path":"pull-stream/pull-ws-server","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-ws-server\\">pull-ws-server</a><div class=\\"contrib\\"></div></h1>\\n<p>create pull stream websockets, servers, and clients.</p>\\n<h2>example</h2>\\n<p>one duplex service you may want to use this with is <a href=\\"https://github.com/dominictarr/muxrpc\\">muxrpc</a></p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> ws = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-ws-server&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\nws.createServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  <span class=\\"hljs-comment\\">//pipe duplex style to your service.</span>\\n  pull(stream, service.createStream(), stream)\\n})\\n.listen(<span class=\\"hljs-number\\">9999</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> stream = ws.connect(<span class=\\"hljs-string\\">&apos;ws://localhost:9999&apos;</span>)\\n\\npull(stream, client.createStream(), stream)</code></pre>\\n<p>if the connection fails, the first read from the stream will be an error,\\notherwise, to get a handle of stream end/error pass a callback to connect.</p>\\n<pre><code class=\\"hljs language-js\\">ws.connect(<span class=\\"hljs-string\\">&apos;ws://localhost:9999&apos;</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, stream</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">return</span> handleError(err)\\n  <span class=\\"hljs-comment\\">//stream is now ready</span>\\n})</code></pre>\\n<p>To run the server over TLS:</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> tlsOpts = {\\n  key: fs.readFileSync(<span class=\\"hljs-string\\">&apos;test/fixtures/keys/agent2-key.pem&apos;</span>),\\n  cert: fs.readFileSync(<span class=\\"hljs-string\\">&apos;test/fixtures/keys/agent2-cert.pem&apos;</span>)\\n};\\nws.createServer(tlsOpts, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  <span class=\\"hljs-comment\\">//pipe duplex style to your service.</span>\\n  pull(stream, service.createStream(), stream)\\n})\\n.listen(<span class=\\"hljs-number\\">9999</span>)</code></pre>\\n<p>To add client-authentication to the server, you can set <code>verifyClient</code>.\\n<a href=\\"https://github.com/websockets/ws/blob/master/doc/ws.md#optionsverifyclient\\">Documentation here</a>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">verifyClient</span> (<span class=\\"hljs-params\\">info</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> info.secure == <span class=\\"hljs-literal\\">true</span>\\n}\\nws.createServer({ verifyClient: verifyClient }, onStream)</code></pre>\\n<h2>use with an http server</h2>\\n<p>if you have an http server that you also need to serve stuff\\nover, and want to use a single port, use the <code>server</code> option.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> http = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;http&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> server = http.createServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">req, res</span>)</span>{...}).listen(....)\\nws.createServer({server: server}, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{ ... })</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,13,19],"version":"1.9.3","npmName":"pull-ws-server","category":"networks"},{"user":"ssbc","name":"muxrpc","path":"ssbc/muxrpc","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/ssbc/muxrpc\\">muxrpc</a><div class=\\"contrib\\"></div></h1>\\n<p>combined rpc and multiplexing, with pull-streams.</p>\\n<p><a href=\\"http://travis-ci.org/ssbc/muxrpc\\"></a></p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> MRPC = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;muxrpc&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\n<span class=\\"hljs-comment\\">//we need a manifest of methods we wish to expose.</span>\\n<span class=\\"hljs-keyword\\">var</span> api = {\\n  <span class=\\"hljs-comment\\">//async is a normal async function</span>\\n  hello: <span class=\\"hljs-string\\">&apos;async&apos;</span>,\\n\\n  <span class=\\"hljs-comment\\">//source is a pull-stream (readable)</span>\\n  stuff: <span class=\\"hljs-string\\">&apos;source&apos;</span>\\n\\n  <span class=\\"hljs-comment\\">//<span class=\\"hljs-doctag\\">TODO:</span> sink and duplex pull-streams</span>\\n}\\n\\n<span class=\\"hljs-comment\\">//pass the api into the constructor, and then pass the object you are wrapping</span>\\n<span class=\\"hljs-comment\\">//(if there is a local api)</span>\\n<span class=\\"hljs-keyword\\">var</span> client = MRPC(api, <span class=\\"hljs-literal\\">null</span>) () <span class=\\"hljs-comment\\">//remoteApi, localApi</span>\\n<span class=\\"hljs-keyword\\">var</span> server = MRPC(<span class=\\"hljs-literal\\">null</span>, api) ({\\n  hello: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">name, cb</span>) </span>{\\n    cb(<span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-string\\">&apos;hello, &apos;</span> + name + <span class=\\"hljs-string\\">&apos;!&apos;</span>)\\n  },\\n  stuff: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> pull.values([<span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">4</span>, <span class=\\"hljs-number\\">5</span>])\\n  }\\n})\\n\\n<span class=\\"hljs-keyword\\">var</span> a = client.createStream()\\n<span class=\\"hljs-keyword\\">var</span> b = server.createStream()\\n\\npull(a, b, a) <span class=\\"hljs-comment\\">//pipe together</span>\\n\\nclient.hello(<span class=\\"hljs-string\\">&apos;world&apos;</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, value</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err\\n  <span class=\\"hljs-built_in\\">console</span>.log(value)\\n  <span class=\\"hljs-comment\\">// hello, world!</span>\\n})\\n\\npull(client.stuff(), pull.drain(<span class=\\"hljs-built_in\\">console</span>.log))\\n<span class=\\"hljs-comment\\">// 1</span>\\n<span class=\\"hljs-comment\\">// 2</span>\\n<span class=\\"hljs-comment\\">// 3</span>\\n<span class=\\"hljs-comment\\">// 4</span>\\n<span class=\\"hljs-comment\\">// 5</span></code></pre>\\n<h2>Manifest</h2>\\n<p>like multilevel, a <a href=\\"https://github.com/juliangruber/multilevel#plugins\\">manifest is required</a>\\nexcept it works a little differently, and since muxrpc works with any api,\\nnot assuming leveldb then you must write the manifest yourself.</p>\\n<p>The manifest is simply an object mapping to strings, or nested objects.</p>\\n<pre><code class=\\"hljs language-js\\">{\\n  foo: <span class=\\"hljs-string\\">&apos;async&apos;</span>,        <span class=\\"hljs-comment\\">//a function with a callback.</span>\\n  bar: <span class=\\"hljs-string\\">&apos;sync&apos;</span>,         <span class=\\"hljs-comment\\">//a function that returns a value</span>\\n                       <span class=\\"hljs-comment\\">//(note this is converted to an async function for the client)</span>\\n  allTheFoos: <span class=\\"hljs-string\\">&apos;source&apos;</span> <span class=\\"hljs-comment\\">//a source pull-stream (aka, readable)</span>\\n  writeFoos: <span class=\\"hljs-string\\">&apos;sink&apos;</span>,   <span class=\\"hljs-comment\\">//a sink pull-stream (aka, writable)</span>\\n  fooPhone: <span class=\\"hljs-string\\">&apos;duplex&apos;</span>,  <span class=\\"hljs-comment\\">//a duplex pull-stream</span>\\n\\n  <span class=\\"hljs-comment\\">//create nested objects like this:</span>\\n  bar: {\\n    ...\\n  }\\n}</code></pre>\\n<h2>Permissions</h2>\\n<p>If you are exposing an api over a network connection,\\nthen you probably want some sort of authorization system.\\n<code>muxrpc@4</code> and earlier had a <code>rpc.permissions()</code> method on\\nthe rpc object, but this has been removed.\\nNow you must pass a permissions function, which is called with\\nthe <code>name</code> (a path) and <code>args</code>, if this function does not throw\\nan error, then the call is allowed.</p>\\n<p>In some cases, a simple allow/deny list is sufficient.\\nA helper function, is provided, which was a part of muxrpc@4</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> Permissions = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;muxrpc/permissions&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> api = {\\n  foo: <span class=\\"hljs-string\\">&apos;async&apos;</span>,\\n  bar: <span class=\\"hljs-string\\">&apos;async&apos;</span>,\\n  auth: <span class=\\"hljs-string\\">&apos;async&apos;</span>\\n}\\n\\n<span class=\\"hljs-comment\\">//set initial settings</span>\\n<span class=\\"hljs-keyword\\">var</span> perms = Perms({allow: [<span class=\\"hljs-string\\">&apos;auth&apos;</span>]})\\n\\n<span class=\\"hljs-keyword\\">var</span> rpc = muxrpc(<span class=\\"hljs-literal\\">null</span>, api, serializer)({\\n  foo: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">val, cb</span>) </span>{\\n    cb(<span class=\\"hljs-literal\\">null</span>, {okay: <span class=\\"hljs-string\\">&apos;foo&apos;</span>})\\n  },\\n  bar: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">val, cb</span>) </span>{\\n    cb(<span class=\\"hljs-literal\\">null</span>, {okay: <span class=\\"hljs-string\\">&apos;bar&apos;</span>})\\n  },\\n  auth: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">pass</span>) </span>{\\n    <span class=\\"hljs-comment\\">//implement an auth function that sets the permissions,</span>\\n    <span class=\\"hljs-comment\\">//using allow or deny lists.</span>\\n\\n    <span class=\\"hljs-keyword\\">if</span>(pass === <span class=\\"hljs-string\\">&apos;whatever&apos;</span>)\\n      perms({deny: [<span class=\\"hljs-string\\">&apos;bar&apos;</span>]}) <span class=\\"hljs-comment\\">//allow everything except &quot;bar&quot;</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(pass === <span class=\\"hljs-string\\">&apos;s3cr3tz&apos;</span>)\\n      perms({}) <span class=\\"hljs-comment\\">//allow everything!!!</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> cb(<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Error</span>(<span class=\\"hljs-string\\">&apos;ACCESS DENIED&apos;</span>))\\n\\n    <span class=\\"hljs-comment\\">//else we ARE authorized.</span>\\n    cb(<span class=\\"hljs-literal\\">null</span>, <span class=\\"hljs-string\\">&apos;ACCESS GRANTED&apos;</span>)\\n  }\\n}, perms)\\n\\n<span class=\\"hljs-comment\\">//Get a stream to connect to the remote. As in the above example!</span>\\n<span class=\\"hljs-keyword\\">var</span> ss = rpc.createStream()</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,13,24,6],"version":"6.3.3","npmName":"muxrpc","category":"networks"},{"user":"pull-stream","name":"pull-http-server","path":"pull-stream/pull-http-server","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-http-server\\">pull-http-server</a><div class=\\"contrib\\"></div></h1>\\n<p>create http servers in pull streamy ways</p>\\n<pre><code class=\\"hljs language-shell\\">npm install --save pull-http-server</code></pre>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-javascript\\"><span class=\\"hljs-keyword\\">var</span> summary = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;server-summary&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> createServer = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-http-server&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> server = createServer(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">stream</span>) </span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;method&apos;</span>, stream.source.method)\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;url&apos;</span>, stream.source.url)\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;headers&apos;</span>, stream.source.headers)\\n\\n  pull(\\n    stream,\\n    pull.map(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">buffer</span>) </span>{\\n      <span class=\\"hljs-keyword\\">var</span> string = buffer.toString()\\n      <span class=\\"hljs-keyword\\">var</span> upper = string.toUpperCase()\\n      <span class=\\"hljs-keyword\\">return</span> Buffer(upper)\\n    }),\\n    stream\\n  )\\n})\\n\\nserver.listen(<span class=\\"hljs-number\\">5000</span>, summary(server))</code></pre>\\n<pre><code class=\\"hljs language-shell\\">curl -d &quot;asdfjkl&quot; http://localhost:5000</code></pre>\\n<h2>usage</h2>\\n<h3><code>createServer = require(&apos;pull-http-server&apos;)</code></h3>\\n<h3><code>server = createServer(requestHandler)</code></h3>\\n<p><code>requestHandler</code> receives <code>duplex</code> pull stream (with <code>source</code> and <code>sink</code> properties).</p>\\n<ul>\\n<li><code>source</code> has same properties as <a href=\\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\\"><code>http.IncomingMessage</code></a></li>\\n<li><code>sink</code> has same properties as <a href=\\"https://nodejs.org/api/http.html#http_class_http_serverresponse\\"><code>http.ServerResponse</code></a></li>\\n</ul>\\n<p>returns node <a href=\\"https://nodejs.org/api/http.html#http_class_http_server\\"><code>http.Server</code></a>.</p>\\n<h2>license</h2>\\n<p>The Apache License</p>\\n<p>Copyright &#xA9; 2016 Michael Williams</p>\\n<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at</p>\\n<pre><code>http://www.apache.org/licenses/LICENSE-2.0\\n</code></pre>\\n<p>Unless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.</p>\\n","contributors":[4],"version":"1.0.0","npmName":"pull-http-server","category":"networks"},{"user":"regular","name":"pull-paginated-api-request","path":"regular/pull-paginated-api-request","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/regular/pull-paginated-api-request\\">pull-paginated-api-request</a><div class=\\"contrib\\"></div></h1>\\n<p>Use this pull-stream to lazily traverse a paginated (REST) API\\n</p>\\n<h2>Simple Usage</h2>\\n<pre><code class=\\"hljs language-js\\">    <span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>);\\n    <span class=\\"hljs-keyword\\">var</span> paginated = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-paginated-api-request&apos;</span>);\\n    ver querystring = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;querystring&apos;</span>);\\n    <span class=\\"hljs-keyword\\">var</span> extend = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;xtend&apos;</span>);\\n    <span class=\\"hljs-keyword\\">var</span> hyperquest = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;hyperquest&apos;</span>)\\n\\n    <span class=\\"hljs-keyword\\">var</span> request = paginated(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">o, pageToken</span>) </span>{\\n        <span class=\\"hljs-keyword\\">return</span> hyperquest(o.endpoint + <span class=\\"hljs-string\\">&apos;?&apos;</span> + querystring.stringify(\\n            extend({o.query, pageToken ? {pageToken: pageToken} : {})\\n        ));\\n    });\\n\\n    pull(\\n        request({\\n            endpoint: <span class=\\"hljs-string\\">&apos;https://api.whatever.com/playlistItems&apos;</span>,\\n            query: {\\n                playlistId: id,\\n                maxResults: <span class=\\"hljs-number\\">50</span>\\n            }\\n        },\\n        [\\n            [<span class=\\"hljs-string\\">&apos;items&apos;</span>, <span class=\\"hljs-literal\\">true</span>], \\n            [<span class=\\"hljs-string\\">&apos;nextPageToken&apos;</span>]\\n        ]),\\n        pull.log()\\n    );\\n\\n    <span class=\\"hljs-comment\\">// outputs all playlist items until a REST API response</span>\\n    <span class=\\"hljs-comment\\">// does not contain a nextPageToken proerty</span></code></pre>\\n<p>See <a href=\\"https://github.com/regular/liked-on-youtube\\">regular/liked-on-youtube</a> for a real-life example.</p>\\n<h2>API</h2>\\n<h3>paginated(makeResponseStream)</h3>\\n<p>Returns a request function that can be used to query the API.\\nTakes a factory function that provides the response of an API server as a Node-style ReadableStream. The arguments of the factory-function are:</p>\\n<ul>\\n<li>\\n<p>makeResponseStream(obj, pageToken)</p>\\n<ul>\\n<li>obj - an ojbect (opaque to pull-paginated-api-request) (see below)</li>\\n<li>pageToken: the token of the result page to request (see below)</li>\\n<li>please return a Node-style ReadStream. (Hint: use hyperquest, it works in Node and in the browser)</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>request(obj, [itemPathway, nextPageTokenPathway])</h2>\\n<p>This is the function retruned by <code>paginated</code> (see above). The first argument <code>obj</code> will simply be forwarded to <code>makeResponseStream</code>. The second argument is an array of <code>pathways</code>. They describe where to find the items (the stuff that we are interessted in) and the token of the next page of API results. The pathways themselves are arrays. They describe the location of those two properties within the JSON-formatted response of the API server. See <a href=\\"https://github.com/substack/node-pathway\\">pathway</a> for details.</p>\\n<p><code>request</code> returns a pull-stream source. It generates output only when that output is consumed. This means that only those result pages get requested from the server that actually are needed. See <a href=\\"https://github.com/dominictarr/pull-stream\\">Dominic Tarr&apos;s pull-stream</a> to learn more about pull-streams and the power of laziness.</p>\\n<h2>Advanced Usage</h2>\\n<p>Instead of specifying an array of pathways, you can provide your own function to extract properties from the server response. This is also how you extract a pageToken from the HTTP headers (used by GitHub for example). See <a href=\\"https://github.com/regular/pull-paginated-api-request/blob/master/test.js#L89\\">test.js</a> for details.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[1],"version":"1.1.0","npmName":"pull-paginated-api-request","category":"networks"},{"user":"pull-stream","name":"stream-to-pull-stream","path":"pull-stream/stream-to-pull-stream","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/stream-to-pull-stream\\">stream-to-pull-stream</a><div class=\\"contrib\\"></div></h1>\\n<p>Convert a classic-stream, or a new-stream into a\\n<a href=\\"https://github.com/dominictarr/pull-stream\\">pull-stream</a></p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> toPull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;stream-to-pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n\\npull(\\n  toPull.source(fs.createReadStream(__filename)),\\n  pull.map(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">e</span>) </span>{ <span class=\\"hljs-keyword\\">return</span> e.toString().toUpperCase() }),\\n  toPull.sink(process.stdout, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(err) <span class=\\"hljs-keyword\\">throw</span> err\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&apos;done&apos;</span>)\\n  })\\n)</code></pre>\\n<p>if the node steam is a duplex (i.e. net, ws) then use <code>toPull.duplex(stream, cb?)</code>\\n<code>duplex</code> takes an optional callback in the same way that <code>sink</code> does.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,25],"version":"1.7.0","npmName":"stream-to-pull-stream","category":"interop"},{"user":"pull-stream","name":"pull-stream-to-stream","path":"pull-stream/pull-stream-to-stream","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream-to-stream\\">pull-stream-to-stream</a><div class=\\"contrib\\"></div></h1>\\n<p>turn a pull-stream into a regular node stream.</p>\\n<h2>example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> toStream = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream-to-stream&apos;</span>)\\n\\n<span class=\\"hljs-comment\\">//if the pull-stream is duplex (an object with two streams: {source, sink})</span>\\n\\nstream = toStream(pullDuplex)\\n\\n<span class=\\"hljs-comment\\">//if the stream is a sink (&quot;writable&quot;)</span>\\nstream = toStream.sink(pullSink)\\n\\n<span class=\\"hljs-comment\\">//if the stream is a source (&quot;readable&quot;)</span>\\n\\nstream = toStream.source(pullSource)</code></pre>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0],"version":"1.3.0","npmName":"pull-stream-to-stream","category":"interop"},{"user":"queckezz","name":"pull-promise","path":"queckezz/pull-promise","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/queckezz/pull-promise\\">pull-promise</a><div class=\\"contrib\\"></div></h1>\\n<blockquote>\\n<p>Pull the value from a promise using <a href=\\"https://pull-stream.github.io/\\">pull-streams</a></p>\\n</blockquote>\\n<p><a href=\\"https://travis-ci.org/queckezz/pull-promise\\"></a>\\n<a href=\\"https://npmjs.org/package/pull-promise\\"></a>\\n<a href=\\"https://david-dm.org/queckezz/pull-promise\\"></a>\\n<a href=\\"http://github.com/queckezz/pull-promise/blob/master/./license\\"></a>\\n<a href=\\"https://github.com/feross/standard\\"></a></p>\\n<h2>Installation</h2>\\n<pre><code class=\\"hljs language-bash\\">$ npm install pull-promise</code></pre>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">const</span> toPull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-promise/source&apos;</span>)\\n<span class=\\"hljs-keyword\\">const</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream&apos;</span>)\\n<span class=\\"hljs-keyword\\">const</span> axios = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;axios&apos;</span>)\\n\\npull(\\n  toPull.source(axios.get(<span class=\\"hljs-string\\">&apos;http://example.org/posts/1&apos;</span>)),\\n  pull.map((response) =&gt; response.body),\\n  pull.log()\\n)\\n<span class=\\"hljs-comment\\">// -&gt; &quot;quia et suscipit\\\\nsuscipit recusandae...&quot;</span></code></pre>\\n<h2>API</h2>\\n<h3><code>.source(Promise)</code></h3>\\n<blockquote>\\n<p>Also available as <code>require(&apos;pull-promise/source&apos;)</code></p>\\n</blockquote>\\n<p>Creates a <a href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/index.md\\">source stream</a> with the resolved promise value.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">const</span> toPull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-promise&apos;</span>)\\n\\npull(\\n  toPull.source(<span class=\\"hljs-built_in\\">Promise</span>.resolve(<span class=\\"hljs-number\\">5</span>)),\\n  pull.log()\\n)\\n<span class=\\"hljs-comment\\">// -&gt; 5</span></code></pre>\\n<h3><code>.through((v) =&gt; Promise)</code></h3>\\n<blockquote>\\n<p>Also available as <code>require(&apos;pull-promise/through&apos;)</code></p>\\n</blockquote>\\n<p>Creates a <a href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/index.md\\">through stream</a> with the resolved promise value as output. <code>fn</code> is a function accepting the incoming value and returning a <code>Promise</code>.</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">const</span> toPull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-promise&apos;</span>)\\n\\npull(\\n  pull.values([<span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">4</span>, <span class=\\"hljs-number\\">8</span>]),\\n  toPull.through((v) =&gt; <span class=\\"hljs-built_in\\">Promise</span>.resolve(v * v)),\\n  pull.log()\\n)\\n<span class=\\"hljs-comment\\">// -&gt; 4, 16, 64</span></code></pre>\\n<h2>Run tests</h2>\\n<pre><code class=\\"hljs language-bash\\">$ npm <span class=\\"hljs-built_in\\">test</span> </code></pre>\\n<h2>License</h2>\\n<p><a href=\\"http://github.com/queckezz/pull-promise/blob/master/./license\\">MIT</a></p>\\n","contributors":[26],"version":"2.0.0","npmName":"pull-promise","category":"interop"},{"user":"dominictarr","name":"pull-box-stream","path":"dominictarr/pull-box-stream","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/dominictarr/pull-box-stream\\">pull-box-stream</a><div class=\\"contrib\\"></div></h1>\\n<p>stream <em>one way</em> encryption based on <a href=\\"https://github.com/paixaop/node-sodium\\">libsodium</a>&apos;s secretbox primitive.</p>\\n<p></p>\\n<p>This protocol should not be used to encrypt a tcp connection\\nunless it was combined with a handshake protocol\\nthat was used to derive a forward secure shared key.</p>\\n<p>It may be used to encrypt a file.</p>\\n<h2>Claims</h2>\\n<h3>All bytes are authenticated &amp; encrypted.</h3>\\n<ul>\\n<li>The reciever never reads an unauthenticated number of bytes.</li>\\n</ul>\\n<p>This protects against attackers causing deadlocks on certain application protocols protected with box-stream.\\n(description of this attack on\\n<a href=\\"https://github.com/calvinmetcalf/hmac-stream/issues/5\\">old version of hmac-stream</a>)</p>\\n<ul>\\n<li>The end of the stream is authenticated.</li>\\n</ul>\\n<p>This detects if an attacker cut off the end of the stream.\\nfor example:</p>\\n<p>Alice: hey bob, just calling to say that I think TLS is really great,\\nreally elegant protocol, and that I love everything about it.</p>\\n<p>Mallory (man in the middle): (SNIP! ...terminates connection...)</p>\\n<p>Alice: NOT!!!!! (Bob never receives this!)</p>\\n<p>Bob... WTF, I thought Alice had taste!</p>\\n<p>Bob never gets the punchline, so thinks that Alice&apos;s childish humor was\\nactually her sincere belief.</p>\\n<p>With box-stream this would result in an error and Bob would know\\nthat there was some additional content he missed which hopefully\\nexplained Alice&apos;s absurd statement.</p>\\n<h2>Disclaims</h2>\\n<ul>\\n<li>This protocol does not obscure packet boundries or packet timing.</li>\\n<li>This protocol is not a substitute for TLS, it must be used with another handshake protocol to derive a shared key.</li>\\n</ul>\\n<h2>Protocol</h2>\\n<p>This protocol has no malleable bytes.\\nEven the framing is authenticated, and since the framing is\\nauthenticated separately to the packet content, an attacker cannot\\nflip any bits without being immediately detected.</p>\\n<p>The design follows on from that used in\\n<a href=\\"https://github.com/dominictarr/pull-mac\\">pull-mac</a>,\\nwhere both the framing and the framed packet are authenticated.</p>\\n<p>In <code>pull-mac</code>, the packet is hashed, and then the header hmac&apos;d.\\nSince the header contains the packet hash and the packet length,\\nthen changing a bit in the packet will produce a different hash\\nand thus an invalid packet. Flipping a bit in the header will\\ninvalidate the hmac.</p>\\n<p>In <code>pull-boxes</code> a similar approach is used, but via nacl&apos;s authenticated\\nencryption primitive: <code>secretbox</code>. salsa20 encryption + poly1305 mac.\\nThe packet is boxed, then the header is constructed from the packet\\nlength + packet mac, then the header is boxed.</p>\\n<p>This protocol uses a 56 byte key (448 bits). The first 32 bytes\\nare the salsa20 key, and the last 24 bytes are the nonce. Previous\\nverisons of this protocol generated a nonce and transmitted it,\\nbut it could be simplified by considering it part of the key.</p>\\n<p>Since every header and packet body are encrypted,\\nthen every byte in the stream appears random.</p>\\n<p>The only information an evesdropper can extract is\\npacket timing and to guess at packet boundries\\n(although, sometimes packets will be appended, obscuring the true boundries)</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> boxes = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-box-stream&apos;</span>)\\n<span class=\\"hljs-comment\\">//generate a random secret, 56 bytes long.</span>\\n\\n<span class=\\"hljs-keyword\\">var</span> key = createRandomSecret(<span class=\\"hljs-number\\">56</span>)\\n\\npull(\\n  plaintext_input,\\n\\n  <span class=\\"hljs-comment\\">//encrypt every byte</span>\\n  boxes.createBoxStream(key),\\n\\n  <span class=\\"hljs-comment\\">//the encrypted stream</span>\\n  pull.through(<span class=\\"hljs-built_in\\">console</span>.log),\\n\\n  <span class=\\"hljs-comment\\">//decrypt every byte</span>\\n  boxes.createUnboxStream(key),\\n\\n  plaintext_output\\n)</code></pre>\\n<h2>Protocol</h2>\\n<pre><code>(\\n\\n  [header MAC (16)] // sends header MAC\\n     |\\n     |   .--header-box-----------------.\\n     \\\\-&gt; |length (2), [packet MAC (16)]| // sends encrypted header\\n         `--^------------|-------------`\\n            |            |\\n            |            |  .-packet-box-------.\\n            |            `-&gt;|data.. (length...)| // sends encrypted packet\\n            |               `-----------|------`\\n            \\\\---------------------------/\\n\\n) * // repeat 0-N times\\n\\n[final header MAC(16)]\\n   |\\n   |  .-final-header-box-------.\\n   \\\\-&gt;|length=0 (2), zeros (16)|\\n      `------------------------`\\n</code></pre>\\n<p>Since the packet mac is inside the header box, the packet\\nmust be boxed first.</p>\\n<p>The last 24 bytes of the 56 byte key is used as the nonce.\\nWhen boxing, you must use a different nonce everytime a particular key is used.</p>\\n<p>The recommended way to do this is to randomly generate an initial\\nnonce for that key, and then increment that nonce on each boxing.\\n(this way security is not dependant on the random number generator)</p>\\n<p>The protocol sends zero or more {header, packet} pairs, then a final\\nheader, that is same length, but is just boxed zeros.\\nEach header is 34 bytes long (header mac + packet_length + packet mac).\\nThen the packet_length is length long (with a maximum length of 4096\\nbytes long, if the in coming packet is longer than that it is split\\ninto 4096 byte long sections.)</p>\\n<p>Packet number P uses N+2P as the nonce on the header box,\\nand N+2P+1 as the nonce on the packet box.</p>\\n<p>A final packet is sent so that an incorrectly terminated session\\ncan be detected.</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,27],"version":"1.0.11","npmName":"pull-box-stream","category":"crypto"},{"user":"auditdrivencrypto","name":"secret-handshake","path":"auditdrivencrypto/secret-handshake","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/auditdrivencrypto/secret-handshake\\">secret-handshake</a><div class=\\"contrib\\"></div></h1>\\n<p>secure-channel based on a a mutually authenticating key agreement handshake, with forward secure identity metadata.</p>\\n<p>For a full explaination of the design, read the\\n<a href=\\"http://dominictarr.github.io/secret-handshake-paper/shs.pdf\\">Design Paper</a></p>\\n<h2>Claims</h2>\\n<p>This protocol derives shared keys and mutually\\nauthenticates both ends of the connection.\\nThe shared secrets are forward secure, and\\nso is the identity metadata.</p>\\n<p>by &quot;forward secure identity metadata&quot; I mean:</p>\\n<ul>\\n<li>a later key compromise cannot confirm the public keys in the handshake.</li>\\n</ul>\\n<p>And also:</p>\\n<ul>\\n<li>an eavesdropper cannot learn public keys</li>\\n<li>replay attacker cannot learn public keys.</li>\\n<li>man in the middle cannot learn public keys.</li>\\n<li>a &quot;wrong number&quot; cannot learn public keys.</li>\\n<li>an unauthenticated client cannot learn server key.</li>\\n</ul>\\n<blockquote>\\n<p>note: a wrong number is just an accidental man in the middle.</p>\\n</blockquote>\\n<p>By &quot;confirm&quot; I mean check a guess at the public key.\\nBy &quot;learn&quot; I mean that you can <em>either</em> extract the public key,\\nor confirm the public key.</p>\\n<p>Also note that if the server decides not to authenticate a client,\\nit will learn their public key. To get to this stage, the client\\nmust know the server&apos;s key, so now the client and server both\\nknow each others key. This is fair.</p>\\n<h2>Disclaims</h2>\\n<p>This protocol cannot hide your ip address.\\nThis protocol does not attempt to obscure packet boundries.\\nIf a man in the middle or wrong number later compromises\\nthe server&apos;s key, they will be able to extract the client\\nkey from the client&apos;s hello packet.</p>\\n<h2>Example</h2>\\n<p>The simplest way to use secret-handshake is to use\\n<code>require(&apos;secret-handshake/net&apos;)</code>, a wrapper around net.\\nThis makes it easy to create encrypted tcp connections.</p>\\n<p><a href=\\"https://github.com/dominictarr/pull-streams\\">pull-streams</a> are used.\\nlearn about how pull-streams from <a href=\\"https://github.com/dominictarr/pull-stream-examples\\">these examples</a></p>\\n<p><a href=\\"https://github.com/dominictarr/chloride\\">chloride</a> is required to generate\\nkey pairs. (which is my fork of) <a href=\\"https://github.com/paixaop/node-sodium\\">sodium</a> (which is also compatible)</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> SHS = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;secret-handshake&apos;</span>)\\n\\n<span class=\\"hljs-keyword\\">var</span> cl = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;chloride&apos;</span>).api\\n<span class=\\"hljs-keyword\\">var</span> appKey = ... <span class=\\"hljs-comment\\">//32 random bytes</span>\\n<span class=\\"hljs-keyword\\">var</span> alice = cl.crypto_sign_keypair() <span class=\\"hljs-comment\\">//client</span>\\n<span class=\\"hljs-keyword\\">var</span> bob = cl.crypto_sign_keypair()   <span class=\\"hljs-comment\\">//server</span>\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">authorize</span>(<span class=\\"hljs-params\\">id, cb</span>) </span>{\\n  cb(<span class=\\"hljs-literal\\">null</span>, check(id)) <span class=\\"hljs-comment\\">//check wether id is authorized.</span>\\n}\\n\\n<span class=\\"hljs-comment\\">//initialize, with default timeouts.</span>\\n<span class=\\"hljs-keyword\\">var</span> ServerStream = SHS.createServer(alice, authorize, appKey)\\n<span class=\\"hljs-keyword\\">var</span> ClientStream = SHS.createClient(bob, appkey)\\n\\n<span class=\\"hljs-keyword\\">var</span> alice_stream = ServerStream(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, stream</span>) </span>{\\n  ...\\n})\\n\\n<span class=\\"hljs-keyword\\">var</span> bob_stream = ClientStream(alice.publicKey, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, stream</span>) </span>{\\n  ...\\n})\\n\\n<span class=\\"hljs-comment\\">//connect streams together.</span>\\npull(alice_stream, bob_stream, alice_stream)</code></pre>\\n<p>I recommend using secret-handshake via <a href=\\"https://github.com/dominictarr/multiserver\\">multiserver</a></p>\\n<h2>api</h2>\\n<h3>createClient(keypair, appkey, timeout) =&gt; createClientStream(key, seed?, cb(err, plainstream)) =&gt; cipherstream</h3>\\n<p><code>createClient</code> takes <code>keypair</code> <code>appkey</code> and <code>timeout</code> and\\nreturns a <code>createClientStream</code></p>\\n<p><code>createClientStream</code> takes a the public <code>key</code> for the remote peer,\\nan optional <code>seed</code> (which is used to generate a one-time private key),\\nand a callback, <code>cb</code>. <code>cipherstream</code>, an encrypted duplex pull-stream is returned.</p>\\n<p>Once the stream is connected to a server stream,\\nsecret-handshake will attempt to authorize, and will call\\n<code>cb</code> with an <code>err</code> if it fails, or <code>plainstream</code> if it succeeds.\\nIf <code>keypair</code> is null, <code>seed</code> <em>must</em> be provided.</p>\\n<h3>createServer(keypair, authorize(id, cb), appkey, timeout) =&gt; createServerStream(cb(err, plain_stream)) =&gt; cipherstream</h3>\\n<p><code>createServer</code> is similar, except it takes <code>authorize</code>,\\nwhich is an async function that will be called when a client connects.\\nA stream constructor function is returned, but the server does\\ntake the client id as an argument. Instead, in the process\\nof the handshake, the server learns the <code>id</code>, and passes it to\\n<code>authorize</code>. If <code>authorize</code> calls back truthy,\\nthen it will callback <code>cb(null, plainstream)</code> else it errors,\\n<code>cb(err)</code>. The value that <code>authorize</code> calls back <code>cb(null, &lt;V&gt;)</code>\\nwill be assigned to <code>plainstream.auth = &lt;V&gt;</code>. Also,\\nthe <code>id</code> of the remote will be assigned to <code>plainstream.id</code>.\\nThis way the application layer can know who it&apos;s peer is.</p>\\n<p>build a client constructor. <code>keypair</code> may be null,\\nif the stream will be used</p>\\n<h2>License</h2>\\n<p>MIT</p>\\n","contributors":[0,28,13],"version":"1.0.0","npmName":"secret-handshake","category":"crypto"},{"user":"pull-stream","name":"pull","path":"pull-stream/pull-stream","subpath":"pull","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/pull.md\\">pull-stream/pull</a><div class=\\"contrib\\"></div></h1>\\n<blockquote>\\n<p>pipe many pull streams into a pipeline</p>\\n</blockquote>\\n<h2>Background</h2>\\n<p>In pull-streams, you need a complete pipeline before data will flow.</p>\\n<p>That means: a source, zero or more throughs, and a sink.</p>\\n<p>But you can still create a <em>partial</em> pipeline, which is a great for tiny pull-stream modules.</p>\\n<h2>Usage</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream/pull&apos;</span>)</code></pre>\\n<p>Create a simple complete pipeline:</p>\\n<pre><code class=\\"hljs language-js\\">pull(source, sink) =&gt; <span class=\\"hljs-literal\\">undefined</span></code></pre>\\n<p>Create a source modified by a through:</p>\\n<pre><code class=\\"hljs language-js\\">pull(source, through) =&gt; source</code></pre>\\n<p>Create a sink, but modify it&apos;s input before it goes.</p>\\n<pre><code class=\\"hljs language-js\\">pull(through, sink) =&gt; sink</code></pre>\\n<p>Create a through, by chainging several throughs:</p>\\n<pre><code class=\\"hljs language-js\\">pull(through1, through2) =&gt; through</code></pre>\\n<p>These streams combine just like normal streams.</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull(source, through),\\n  pull(through1, through2),\\n  pull(through, sink)\\n) =&gt; <span class=\\"hljs-literal\\">undefined</span></code></pre>\\n<p>The complete pipeline returns undefined, because it cannot be piped to anything else.</p>\\n<p>Pipe duplex streams like this:</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> a = duplex()\\n<span class=\\"hljs-keyword\\">var</span> b = duplex()\\n\\npull(a.source, b.sink)\\npull(b.source, a.sink)\\n\\n<span class=\\"hljs-comment\\">//which is the same as</span>\\n\\nb.sink(a.source); a.sink(b.source)\\n\\n<span class=\\"hljs-comment\\">//but the easiest way is to allow pull to handle this</span>\\n\\npull(a, b, a)\\n\\n<span class=\\"hljs-comment\\">//&quot;pull from a to b and then back to a&quot;</span></code></pre>\\n<h2>API</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> pull = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream/pull&apos;</span>)</code></pre>\\n<h3><code>pull(...streams)</code></h3>\\n<p><code>pull</code> is a function that receives n-arity stream arguments and connects them into a pipeline.</p>\\n<p><code>pull</code> detects the type of stream by checking function arity, if the function takes only one argument it&apos;s either a sink or a through. Otherwise it&apos;s a source. A duplex stream is an object with the shape <code>{ source, sink }</code>.</p>\\n<p>If the pipeline is complete (reduces into a source being passed into a sink), then <code>pull</code> returns <code>undefined</code>, as the data is flowing.</p>\\n<p>If the pipeline is partial (reduces into either a source, a through, or a sink), then <code>pull</code> returns the partial pipeline, as it must be composed with other streams before the data will flow.</p>\\n<h2>Install</h2>\\n<p>With <a href=\\"https://npmjs.org/\\">npm</a> installed, run</p>\\n<pre><code class=\\"hljs language-sh\\">$ npm install pull-stream</code></pre>\\n<h2>See Also</h2>\\n<ul>\\n<li><a href=\\"https://github.com/mafintosh/pump\\"><code>mafintosh/pump</code></a></li>\\n<li><a href=\\"https://github.com/mafintosh/pumpify\\"><code>mafintosh/pumpify</code></a></li>\\n</ul>\\n<h2>License</h2>\\n<p><a href=\\"https://tldrlegal.com/license/mit-license\\">MIT</a></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"count","path":"pull-stream/pull-stream","subpath":"sources/count","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/count.md\\">pull-stream/sources/count</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>count = require(&apos;pull-stream/sources/count&apos;)</code></h3>\\n<h3><code>count(max, onAbort)</code></h3>\\n<p>create a stream that outputs <code>0 ... max</code>.\\nby default, <code>max = Infinity</code>, see\\n<a href=\\"http://github.com/pull-stream/pull-stream/blob/master/docs/sources/count/../../throughs/take.md\\">take</a></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"empty","path":"pull-stream/pull-stream","subpath":"sources/empty","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/empty.md\\">pull-stream/sources/empty</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>empty = require(&apos;pull-stream/sources/empty&apos;)</code></h3>\\n<h3><code>empty()</code></h3>\\n<p>A stream with no contents (it just ends immediately)</p>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  pull.empty(),\\n  pull.collect(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">err, ary</span>) </span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(arg)\\n    <span class=\\"hljs-comment\\">// ==&gt; []</span>\\n  })\\n}</code></pre>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"error","path":"pull-stream/pull-stream","subpath":"sources/error","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/error.md\\">pull-stream/sources/error</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>error = require(&apos;pull-stream/sources/error&apos;)</code></h3>\\n<h3><code>error(err)</code></h3>\\n<p>a stream that errors immediately</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"infinite","path":"pull-stream/pull-stream","subpath":"sources/infinite","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/infinite.md\\">pull-stream/sources/infinite</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>infinite = require(&apos;pull-stream/sources/infinite&apos;)</code></h3>\\n<h3><code>infinite(generator, onAbort)</code></h3>\\n<p>create an unending stream by repeatedly calling a generator\\nfunction (by default, <code>Math.random</code>)\\nsee <a href=\\"http://github.com/pull-stream/pull-stream/blob/master/docs/sources/infinite/../../throughs/take.md\\">take</a></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"keys","path":"pull-stream/pull-stream","subpath":"sources/keys","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/keys.md\\">pull-stream/sources/keys</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>keys = require(&apos;pull-stream/sources/keys&apos;)</code></h3>\\n<h3><code>keys(array | object, onAbort)</code></h3>\\n<p>stream the key names from an object (or array)</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"once","path":"pull-stream/pull-stream","subpath":"sources/once","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/once.md\\">pull-stream/sources/once</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>once = require(&apos;pull-stream/sources/once&apos;)</code></h3>\\n<h3><code>once(value, onAbort)</code></h3>\\n<p>a stream with a single value</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"values","path":"pull-stream/pull-stream","subpath":"sources/values","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sources/values.md\\">pull-stream/sources/values</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>values = require(&apos;pull-stream/sources/values&apos;)</code></h3>\\n<h3><code>values(array | object, onAbort)</code></h3>\\n<p>create a SourceStream that reads the values from an array or object and then stops.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"async-map","path":"pull-stream/pull-stream","subpath":"throughs/async-map","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/async-map.md\\">pull-stream/throughs/async-map</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>asyncMap = require(&apos;pull-stream/throughs/async-map&apos;)</code></h3>\\n<h3><code>asyncMap(fn)</code></h3>\\n<p>Like <a href=\\"http://github.com/pull-stream/pull-stream/blob/master/docs/throughs/async-map/.././map.md\\"><code>map</code></a> but the signature of <code>fn</code> must be\\n<code>function (data, cb) { cb(null, data) }</code></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"filter-not","path":"pull-stream/pull-stream","subpath":"throughs/filter-not","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/filter-not.md\\">pull-stream/throughs/filter-not</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>filterNot = require(&apos;pull-stream/throughs/filter-not&apos;)</code></h3>\\n<h3><code>filterNot(test)</code></h3>\\n<p>Like <a href=\\"http://github.com/pull-stream/pull-stream/blob/master/docs/throughs/filter-not/.././filter.md\\"><code>filter</code></a>, but remove items where the filter returns true.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"filter","path":"pull-stream/pull-stream","subpath":"throughs/filter","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/filter.md\\">pull-stream/throughs/filter</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>filter = require(&apos;pull-stream/throughs/filter&apos;)</code></h3>\\n<h3><code>filter(test)</code></h3>\\n<p>Like <code>[].filter(function (data) {return true || false})</code>\\nonly <code>data</code> where <code>test(data) == true</code> are let through\\nto the next stream.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"flatten","path":"pull-stream/pull-stream","subpath":"throughs/flatten","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/flatten.md\\">pull-stream/throughs/flatten</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>flatten = require(&apos;pull-stream/throughs/flatten&apos;)</code></h3>\\n<h3><code>flatten()</code></h3>\\n<p>Turn a stream of arrays into a stream of their items, (undoes group).</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"map","path":"pull-stream/pull-stream","subpath":"throughs/map","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/map.md\\">pull-stream/throughs/map</a><div class=\\"contrib\\"></div></h1>\\n<blockquote>\\n<p>[].map for pull-streams</p>\\n</blockquote>\\n<h2>Background</h2>\\n<p>Pull-streams are arrays of data in time rather than space.</p>\\n<p>As with a <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\\"><code>[].map</code></a>, we may want to map a function over a stream.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">var</span> map = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&apos;pull-stream/throughs/map&apos;</span>)</code></pre>\\n<pre><code class=\\"hljs language-js\\">pull(\\n  values([<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span>]),\\n  map(<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">x</span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> x * x\\n  }),\\n  log()\\n)\\n<span class=\\"hljs-comment\\">// 0</span>\\n<span class=\\"hljs-comment\\">// 1</span>\\n<span class=\\"hljs-comment\\">// 4</span>\\n<span class=\\"hljs-comment\\">// 9</span></code></pre>\\n<h2>Usage</h2>\\n<h3><code>map = require(&apos;pull-stream/throughs/map&apos;)</code></h3>\\n<h3><code>map((data) =&gt; data)</code></h3>\\n<p><code>map(fn)</code> returns a through stream that calls the given <code>fn</code> for each chunk of incoming data and outputs the return value, in the same order as before.</p>\\n<h2>Install</h2>\\n<p>With <a href=\\"https://npmjs.org/\\">npm</a> installed, run</p>\\n<pre><code>$ npm install pull-stream\\n</code></pre>\\n<h2>See Also</h2>\\n<ul>\\n<li><a href=\\"https://github.com/brycebaril/through2-map\\"><code>brycebaril/through2-map</code></a></li>\\n<li><a href=\\"http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/map.html\\"><code>Rx.Obsevable#map</code></a></li>\\n</ul>\\n<h2>License</h2>\\n<p><a href=\\"https://tldrlegal.com/license/mit-license\\">MIT</a></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"non-unique","path":"pull-stream/pull-stream","subpath":"throughs/non-unique","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/non-unique.md\\">pull-stream/throughs/non-unique</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>nonUnique = require(&apos;pull-stream/throughs/non-unique&apos;)</code></h3>\\n<h3><code>nonUnique(prop)</code></h3>\\n<p>Filter unique items -- get the duplicates.\\nThe inverse of <a href=\\"http://github.com/pull-stream/pull-stream/blob/master/docs/throughs/non-unique/.././unique.md\\"><code>unique</code></a></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"take","path":"pull-stream/pull-stream","subpath":"throughs/take","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/take.md\\">pull-stream/throughs/take</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>take = require(&apos;pull-stream/throughs/take&apos;)</code></h3>\\n<h3><code>take(test [, opts])</code></h3>\\n<p>If test is a function, read data from the source stream and forward it downstream until test(data) returns false.</p>\\n<p>If <code>opts.last</code> is set to true, the data for which the test failed will be included in what is forwarded.</p>\\n<p>If test is an integer, take n item from the source.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"through","path":"pull-stream/pull-stream","subpath":"throughs/through","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/through.md\\">pull-stream/throughs/filter</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>filter = require(&apos;pull-stream/throughs/filter&apos;)</code></h3>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"unique","path":"pull-stream/pull-stream","subpath":"throughs/unique","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/throughs/unique.md\\">pull-stream/throughs/unique</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>unique = require(&apos;pull-stream/throughs/unique&apos;)</code></h3>\\n<h3><code>unique(prop)</code></h3>\\n<p>Filter items that have a repeated value for <code>prop()</code>,\\nby default, <code>prop = function (it) {return it }</code>, if prop is a string,\\nit will filter nodes which have repeated values for that property.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"collect","path":"pull-stream/pull-stream","subpath":"sinks/collect","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/collect.md\\">pull-stream/sinks/collect</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>collect = require(&apos;pull-stream/sinks/collect&apos;)</code></h3>\\n<h3><code>collect(cb)</code></h3>\\n<p>Read the stream into an array, then callback.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"concat","path":"pull-stream/pull-stream","subpath":"sinks/concat","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/concat.md\\">pull-stream/sinks/concat</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>concat = require(&apos;pull-stream/sinks/concat&apos;)</code></h3>\\n<h3><code>concat(cb)</code></h3>\\n<p>concat stream of strings into single string, then callback.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"drain","path":"pull-stream/pull-stream","subpath":"sinks/drain","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/drain.md\\">pull-stream/sinks/drain</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>drain = require(&apos;pull-stream/sinks/drain&apos;)</code></h3>\\n<h3><code>drain(op?, done?)</code></h3>\\n<p>Drain the stream, calling <code>op</code> on each <code>data</code>.\\ncall <code>done</code> when stream is finished.\\nIf op returns <code>===false</code>, abort the stream.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"find","path":"pull-stream/pull-stream","subpath":"sinks/find","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/find.md\\">pull-stream/sinks/find</a><div class=\\"contrib\\"></div></h1>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"log","path":"pull-stream/pull-stream","subpath":"sinks/log","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/log.md\\">pull-stream/sinks/log</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>log = require(&apos;pull-stream/sinks/log&apos;)</code></h3>\\n<h3><code>log()</code></h3>\\n<p>output the stream to <code>console.log</code></p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"on-end","path":"pull-stream/pull-stream","subpath":"sinks/on-end","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/on-end.md\\">pull-stream/sinks/on-end</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>onEnd = require(&apos;pull-stream/sinks/on-end&apos;)</code></h3>\\n<h3><code>onEnd(cb)</code></h3>\\n<p>Drain the stream and then callback when done.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"},{"user":"pull-stream","name":"reduce","path":"pull-stream/pull-stream","subpath":"sinks/reduce","readme":"<h1 class=\\"title\\"><a target=\\"_blank\\" href=\\"https://github.com/pull-stream/pull-stream/blob/master/docs/sinks/reduce.md\\">pull-stream/sinks/reduce</a><div class=\\"contrib\\"></div></h1>\\n<h2>usage</h2>\\n<h3><code>reduce = require(&apos;pull-stream/sinks/reduce&apos;)</code></h3>\\n<h3><code>reduce (reduce, initial, cb)</code></h3>\\n<p>reduce stream into single value, then callback.</p>\\n","contributors":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"version":false,"npmName":false,"category":"core"}]}'),router=require("./router"),nav=require("./views/nav"),modulePage=require("./views/module-page"),prefix=(null||!0)&&"_b03c5c45",app={
init:function(){var s=router.init();return{model:Object.assign(model,{modules:model.modules.map(function(s){return Object.assign(s,{contributors:deIndexContributors(model.contributors,s.contributors)})}),route:s.model}),effect:s.effect}},update:function(s,a){var e=a.type.split(":")[0];return"router"===e?{model:Object.assign({},s,{route:router.update(s,a).model})}:{model:s}},view:function(s){var a=s.route||"pull-stream",e=find(s.modules,function(s){return s.name===a});return inu.html(_templateObject,prefix,nav(s),modulePage(e))},run:router.run},main=document.querySelector("main");pull(inu.start(app).views(),pull.drain(function(s){inu.html.update(main,s)}));
},{"./router":53,"./views/module-page":55,"./views/nav":56,"array-find":1,"insert-css":5,"inu":7}]},{},[57]);
